{"version":3,"file":"ngx-calender.umd.min.js","sources":["~/ngx-calender/src/app/modules/calender/calender.component.ts","~/ngx-calender/src/app/modules/calender/calender.module.ts"],"sourcesContent":["import {\n  Component, Input, OnInit, EventEmitter, Output, ViewChildren, ElementRef,\n  AfterViewInit, Renderer2\n} from '@angular/core';\nimport { format, subDays, getDaysInMonth, startOfMonth, getMonth, parse } from 'date-fns';\nexport class NgxCalenderComponent implements OnInit, AfterViewInit {\n\n   showHeader = true;\n   clickedDate = new EventEmitter<Date>();\n  currentDate: string;\n  currentMonth: string;\n  currentYear: number;\n  protected noOfColumn: Array<number>;\n  protected noOfRows: Array<number>;\nprivate currDaysInCurrMonth: number;\nprivate count: number;\nprivate tdCollection;\nprivate currMonthFirstDay: number;\n  protected isCurrentDate: boolean;\nprivate clickedDateCell: HTMLElement;\n/**\n * @param {?} renderer\n */\nconstructor(private renderer: Renderer2) {\n\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this.count = 0;\n    this.noOfRows = Array(5).map((x, i) => i);\n    this.noOfColumn = Array(7).map((x, i) => i);\n    this.currentDate = format(new Date(), 'D');\n    this.currentMonth = format(new Date(), 'MMMM');\n    this.currentYear = Number(format(new Date(), 'YYYY'));\n    this.currDaysInCurrMonth = getDaysInMonth(new Date());\n    this.currMonthFirstDay = (Number(format(startOfMonth(new Date()), 'd')) - 1);\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this.tdCollection.map((x: ElementRef) => {\n      if (x.nativeElement.innerText === this.currentDate) {\n        this.renderer.addClass(x.nativeElement, 'currentDate');\n      }\n    });\n\n  }\n\n  getMonthDate: (colInd: number, rowIndex: number) => Number = function(colInd, rowIndex) {\n    if (colInd === 0 && rowIndex === 0) {\n      this.count = 0;\n    }\n    this.isCurrentDate = false;\n    if (rowIndex === 0) {\n      if (colInd >= this.currMonthFirstDay) {\n        return this.getDate();\n      }\n    } else if (this.count < this.currDaysInCurrMonth) {\n      return this.getDate();\n    }\n  };\n\n  getDate: () => number = function () {\n    this.count++;\n    return this.count;\n  };\n/**\n * @param {?} evt\n * @return {?}\n */\nclickHandler(evt: Event) {\n    if (evt.currentTarget['innerText'] !== '') {\n\n      if (this.clickedDateCell) {\n        this.renderer.removeClass(this.clickedDateCell, 'highlightDateCell');\n      }\n      this.clickedDateCell = /** @type {?} */(( <HTMLElement>evt.currentTarget));\n      this.renderer.addClass(this.clickedDateCell, 'highlightDateCell');\n      const /** @type {?} */ date = parse(`${this.currentYear}-${this.currentMonth}-${this.currentDate}`);\n      this.clickedDate.emit(date);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'ng-calender',\n  template: `\n    <div *ngIf=\"showHeader\">{{currentMonth}} - {{currentYear}}</div>\n    <table >\n      <thead >\n      <tr>\n        <th scope=\"col\" title=\"Monday\">Mo</th>\n        <th scope=\"col\" title=\"Tuesday\">Tu</th>\n        <th scope=\"col\" title=\"Wednesday\">We</th>\n        <th scope=\"col\" title=\"Thursday\">Th</th>\n        <th scope=\"col\" title=\"Friday\">Fr</th>\n        <th scope=\"col\" title=\"Saturday\">Sa</th>\n        <th scope=\"col\" title=\"Sunday\">Su</th>\n      </tr>\n      </thead>\n      <tbody>\n      <tr *ngFor=\"let row of noOfRows let rowInd= index\"  >\n        <td *ngFor=\"let col of noOfColumn let colInd = index\"  #tdCell\n            (click)=\"clickHandler($event)\">\n          {{getMonthDate(colInd, rowInd)}}\n        </td>\n      </tr>\n      </tbody>\n    </table>\n  `,\n  styles: [`\n    :host {\n      display: block;\n      background-color: #fff;\n      height: 90%;\n      min-width: 300px;\n      font-family: sans-serif; }\n      :host div {\n        display: -webkit-box;\n        display: -ms-flexbox;\n        display: flex;\n        -webkit-box-align: center;\n            -ms-flex-align: center;\n                align-items: center;\n        font-size: 1.5rem;\n        font-weight: bold;\n        padding: 1rem;\n        border-top: 5px solid gray;\n        border-left: 1px solid gray;\n        border-right: 1px solid gray;\n        border-top-right-radius: 5px;\n        border-top-left-radius: 5px; }\n      :host table {\n        width: 100%;\n        height: 100%;\n        border-collapse: collapse;\n        border-spacing: 0px;\n        border: none;\n        font-size: 1rem;\n        border: 1px solid gray; }\n        :host table thead {\n          border-bottom: 1px solid rgba(128, 128, 128, 0.45);\n          border-spacing: 0px; }\n          :host table thead tr th {\n            background-color: #d0d0d0;\n            display: table-cell;\n            text-align: center;\n            vertical-align: middle;\n            padding: .5rem;\n            font-weight: bold; }\n        :host table tr td {\n          text-align: center;\n          cursor: pointer; }\n        :host table tr:nth-child(odd) {\n          background-color: #f2f2f2; }\n        :host table .currentDate {\n          border-bottom: 2px solid gray;\n          font-weight: bold; }\n        :host table .highlightDateCell {\n          background-color: #d0d0d0;\n          font-weight: bold; }\n  `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'showHeader': [{ type: Input },],\n'clickedDate': [{ type: Output },],\n'tdCollection': [{ type: ViewChildren, args: ['tdCell', ] },],\n};\n}\n\nfunction NgxCalenderComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxCalenderComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgxCalenderComponent.ctorParameters;\n/** @type {?} */\nNgxCalenderComponent.propDecorators;\n/** @type {?} */\nNgxCalenderComponent.prototype.showHeader;\n/** @type {?} */\nNgxCalenderComponent.prototype.clickedDate;\n/** @type {?} */\nNgxCalenderComponent.prototype.currentDate;\n/** @type {?} */\nNgxCalenderComponent.prototype.currentMonth;\n/** @type {?} */\nNgxCalenderComponent.prototype.currentYear;\n/** @type {?} */\nNgxCalenderComponent.prototype.noOfColumn;\n/** @type {?} */\nNgxCalenderComponent.prototype.noOfRows;\n/** @type {?} */\nNgxCalenderComponent.prototype.currDaysInCurrMonth;\n/** @type {?} */\nNgxCalenderComponent.prototype.count;\n/** @type {?} */\nNgxCalenderComponent.prototype.tdCollection;\n/** @type {?} */\nNgxCalenderComponent.prototype.currMonthFirstDay;\n/** @type {?} */\nNgxCalenderComponent.prototype.isCurrentDate;\n/** @type {?} */\nNgxCalenderComponent.prototype.clickedDateCell;\n/** @type {?} */\nNgxCalenderComponent.prototype.getMonthDate;\n/** @type {?} */\nNgxCalenderComponent.prototype.getDate;\n/** @type {?} */\nNgxCalenderComponent.prototype.renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgxCalenderComponent } from './calender.component';\nexport class CalenderModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    NgxCalenderComponent\n  ],\n  declarations: [NgxCalenderComponent]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CalenderModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCalenderModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCalenderModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["NgxCalenderComponent","renderer","this","showHeader","clickedDate","EventEmitter","getMonthDate","colInd","rowIndex","count","isCurrentDate","currMonthFirstDay","getDate","currDaysInCurrMonth","prototype","ngOnInit","noOfRows","Array","map","x","i","noOfColumn","currentDate","format","Date","currentMonth","currentYear","Number","getDaysInMonth","startOfMonth","ngAfterViewInit","_this","tdCollection","nativeElement","innerText","addClass","clickHandler","evt","currentTarget","clickedDateCell","removeClass","date","parse","emit","decorators","type","Component","args","selector","template","styles","ctorParameters","Renderer2","propDecorators","Input","Output","ViewChildren","CalenderModule","NgModule","imports","CommonModule","exports","declarations"],"mappings":"6VAKA,IAAAA,EAAA,WAkBA,SAAAA,EAAsBC,GAAAC,KAAtBD,SAAsBA,EAhBnBC,KAAHC,YAEgB,EADbD,KAAHE,YAEiB,IAAIC,EAAAA,aAyCnBH,KAAFI,aAJ+D,SAAAC,EAAiBC,GAS5E,GARe,IAIXD,GAJ6B,IAAbC,IAKlBN,KAJKO,MAAQ,GAMfP,KAJKQ,eAAgB,EACJ,IAIbF,GACF,GAAID,GAJUL,KAAKS,kBAKjB,OAJOT,KAAKU,eAET,GAAAV,KAASO,MAAQP,KAAKW,oBAK3B,OAJOX,KAAKU,WAQhBV,KAAFU,QAJ0B,WAMtB,OADAV,KAJKO,QACEP,KAAKO,cAlChBT,EAAAc,UAAAC,SAAA,WACIb,KAFKO,MAAQ,EAGbP,KAFKc,SAAWC,MAAM,GAAGC,IAAI,SAACC,EAAGC,GAAM,OAAAA,IAGvClB,KAFKmB,WAAaJ,MAAM,GAAGC,IAAI,SAACC,EAAGC,GAAM,OAAAA,IAGzClB,KAFKoB,YAAcC,EAAAA,OAAO,IAAIC,KAAQ,KAGtCtB,KAFKuB,aAAeF,EAAAA,OAAO,IAAIC,KAAQ,QAGvCtB,KAFKwB,YAAcC,OAAOJ,EAAAA,OAAO,IAAIC,KAAQ,SAG7CtB,KAFKW,oBAAsBe,EAAAA,eAAe,IAAIJ,MAG9CtB,KAFKS,kBAAoBgB,OAAQJ,EAAAA,OAAOM,EAAAA,aAAa,IAAIL,MAAS,MAAQ,GAO9ExB,EAAAc,UAAAgB,gBAAA,WAAA,IAAAC,EAAA7B,KACIA,KAJK8B,aAAad,IAAI,SAACC,GAKjBA,EAJEc,cAAcC,YAAcH,EAAKT,aAKrCS,EAJK9B,SAASkC,SAAShB,EAAEc,cAAe,kBAgChDjC,EAAAc,UAAAsB,aAAA,SAPGC,GAQC,GAPuC,KAOnCA,EAPIC,cAAe,UAAoB,CASrCpC,KAPKqC,iBAQPrC,KAPKD,SAASuC,YAAYtC,KAAKqC,gBAAiB,qBASlDrC,KAPKqC,gBAA+BF,EAAK,cAQzCnC,KAPKD,SAASkC,SAASjC,KAAKqC,gBAAiB,qBAQ7C,IAPME,EAAOC,EAAAA,MAAOxC,KAAOwB,YAOjC,IAP6CxB,KAAQuB,aAOrD,IAPkEvB,KAAQoB,aAQpEpB,KAPKE,YAAYuC,KAAKF,OAtE5B,GAyEOzC,EAAP4C,aACEC,KAAMC,EAAAA,UAAWC,OAQjBC,SAPU,cAQVC,SAPU,mxBA+BVC,QAPQ,0lDAuDTlD,EAADmD,eAAC,WAAA,QAUAN,KAAMO,EAAAA,aAPApD,EAAPqD,gBAUAlD,aATiB0C,KAAMS,EAAAA,QAUvBlD,cATkByC,KAAMU,EAAAA,SAUxBvB,eATmBa,KAAMW,EAAAA,aAAcT,MAAM,aCnK7C,IAAAU,EAAA,kBAAA,aAAA,GAEqCA,EAArCb,aACEC,KAAMa,EAAAA,SAAUX,OADhBY,SACEC,EAAAA,cAEFC,SACE7D,GAEF8D,cAEc9D,OAIfyD,EAADN,eAAC,WAAA"}
