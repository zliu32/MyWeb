import { Component, EventEmitter, Input, NgModule, Output, Renderer2, ViewChildren } from '@angular/core';
import { CommonModule } from '@angular/common';
import { format, getDaysInMonth, parse, startOfMonth } from 'date-fns';

class NgxCalenderComponent {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        this.renderer = renderer;
        this.showHeader = true;
        this.clickedDate = new EventEmitter();
        this.getMonthDate = function (colInd, rowIndex) {
            if (colInd === 0 && rowIndex === 0) {
                this.count = 0;
            }
            this.isCurrentDate = false;
            if (rowIndex === 0) {
                if (colInd >= this.currMonthFirstDay) {
                    return this.getDate();
                }
            }
            else if (this.count < this.currDaysInCurrMonth) {
                return this.getDate();
            }
        };
        this.getDate = function () {
            this.count++;
            return this.count;
        };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.count = 0;
        this.noOfRows = Array(5).map((x, i) => i);
        this.noOfColumn = Array(7).map((x, i) => i);
        this.currentDate = format(new Date(), 'D');
        this.currentMonth = format(new Date(), 'MMMM');
        this.currentYear = Number(format(new Date(), 'YYYY'));
        this.currDaysInCurrMonth = getDaysInMonth(new Date());
        this.currMonthFirstDay = (Number(format(startOfMonth(new Date()), 'd')) - 1);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.tdCollection.map((x) => {
            if (x.nativeElement.innerText === this.currentDate) {
                this.renderer.addClass(x.nativeElement, 'currentDate');
            }
        });
    }
    /**
     * @param {?} evt
     * @return {?}
     */
    clickHandler(evt) {
        if (evt.currentTarget['innerText'] !== '') {
            if (this.clickedDateCell) {
                this.renderer.removeClass(this.clickedDateCell, 'highlightDateCell');
            }
            this.clickedDateCell = (evt.currentTarget);
            this.renderer.addClass(this.clickedDateCell, 'highlightDateCell');
            const /** @type {?} */ date = parse(`${this.currentYear}-${this.currentMonth}-${this.currentDate}`);
            this.clickedDate.emit(date);
        }
    }
}
NgxCalenderComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-calender',
                template: `
    <div *ngIf="showHeader">{{currentMonth}} - {{currentYear}}</div>
    <table >
      <thead >
      <tr>
        <th scope="col" title="Monday">Mo</th>
        <th scope="col" title="Tuesday">Tu</th>
        <th scope="col" title="Wednesday">We</th>
        <th scope="col" title="Thursday">Th</th>
        <th scope="col" title="Friday">Fr</th>
        <th scope="col" title="Saturday">Sa</th>
        <th scope="col" title="Sunday">Su</th>
      </tr>
      </thead>
      <tbody>
      <tr *ngFor="let row of noOfRows let rowInd= index"  >
        <td *ngFor="let col of noOfColumn let colInd = index"  #tdCell
            (click)="clickHandler($event)">
          {{getMonthDate(colInd, rowInd)}}
        </td>
      </tr>
      </tbody>
    </table>
  `,
                styles: [`
    :host {
      display: block;
      background-color: #fff;
      height: 90%;
      min-width: 300px;
      font-family: sans-serif; }
      :host div {
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        -webkit-box-align: center;
            -ms-flex-align: center;
                align-items: center;
        font-size: 1.5rem;
        font-weight: bold;
        padding: 1rem;
        border-top: 5px solid gray;
        border-left: 1px solid gray;
        border-right: 1px solid gray;
        border-top-right-radius: 5px;
        border-top-left-radius: 5px; }
      :host table {
        width: 100%;
        height: 100%;
        border-collapse: collapse;
        border-spacing: 0px;
        border: none;
        font-size: 1rem;
        border: 1px solid gray; }
        :host table thead {
          border-bottom: 1px solid rgba(128, 128, 128, 0.45);
          border-spacing: 0px; }
          :host table thead tr th {
            background-color: #d0d0d0;
            display: table-cell;
            text-align: center;
            vertical-align: middle;
            padding: .5rem;
            font-weight: bold; }
        :host table tr td {
          text-align: center;
          cursor: pointer; }
        :host table tr:nth-child(odd) {
          background-color: #f2f2f2; }
        :host table .currentDate {
          border-bottom: 2px solid gray;
          font-weight: bold; }
        :host table .highlightDateCell {
          background-color: #d0d0d0;
          font-weight: bold; }
  `]
            },] },
];
/**
 * @nocollapse
 */
NgxCalenderComponent.ctorParameters = () => [
    { type: Renderer2, },
];
NgxCalenderComponent.propDecorators = {
    'showHeader': [{ type: Input },],
    'clickedDate': [{ type: Output },],
    'tdCollection': [{ type: ViewChildren, args: ['tdCell',] },],
};

class CalenderModule {
}
CalenderModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                exports: [
                    NgxCalenderComponent
                ],
                declarations: [NgxCalenderComponent]
            },] },
];
/**
 * @nocollapse
 */
CalenderModule.ctorParameters = () => [];

/**
 * Generated bundle index. Do not edit.
 */

export { CalenderModule, NgxCalenderComponent as Éµa };
//# sourceMappingURL=ngx-calender.js.map
