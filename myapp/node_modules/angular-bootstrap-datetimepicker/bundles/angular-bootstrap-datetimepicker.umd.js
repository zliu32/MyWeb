/**
 * Copyright (c) 2013-present Dale Lotts
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('moment'), require('@angular/core'), require('@angular/forms'), require('rxjs/operators'), require('@angular/common')) :
	typeof define === 'function' && define.amd ? define('angular-bootstrap-datetimepicker', ['exports', 'moment', '@angular/core', '@angular/forms', 'rxjs/operators', '@angular/common'], factory) :
	(factory((global['angular-bootstrap-datetimepicker'] = {}),global.moment,global.ng.core,global.ng.forms,global.Rx.Observable.prototype,global.ng.common));
}(this, (function (exports,_moment,core,forms,operators,common) { 'use strict';

var extendStatics = Object.setPrototypeOf ||
    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var DlDateAdapter =               (function () {
    function DlDateAdapter() {
    }
    return DlDateAdapter;
}());
var moment = _moment;
var DlDateAdapterMoment =               (function (_super) {
    __extends(DlDateAdapterMoment, _super);
    function DlDateAdapterMoment() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DlDateAdapterMoment.prototype.fromMilliseconds = function (milliseconds) {
        return moment(milliseconds);
    };
    DlDateAdapterMoment.prototype.toMilliseconds = function (value) {
        return (value) ? value.valueOf() : undefined;
    };
    return DlDateAdapterMoment;
}(DlDateAdapter));
var DlDateAdapterNative =               (function (_super) {
    __extends(DlDateAdapterNative, _super);
    function DlDateAdapterNative() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DlDateAdapterNative.prototype.fromMilliseconds = function (milliseconds) {
        return new Date(milliseconds);
    };
    DlDateAdapterNative.prototype.toMilliseconds = function (value) {
        return (value) ? value.getTime() : undefined;
    };
    return DlDateAdapterNative;
}(DlDateAdapter));
var DlDateAdapterNumber =               (function (_super) {
    __extends(DlDateAdapterNumber, _super);
    function DlDateAdapterNumber() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DlDateAdapterNumber.prototype.fromMilliseconds = function (milliseconds) {
        return milliseconds;
    };
    DlDateAdapterNumber.prototype.toMilliseconds = function (value) {
        return value;
    };
    return DlDateAdapterNumber;
}(DlDateAdapter));
var moment$1 = _moment;
var DL_STRING_DATE_OUTPUT_FORMAT = new core.InjectionToken('DL_STRING_DATE_OUTPUT_FORMAT');
var DL_STRING_DATE_INPUT_FORMATS = new core.InjectionToken('DL_STRING_DATE_INPUT_FORMATS');
var DlDateAdapterString =               (function (_super) {
    __extends(DlDateAdapterString, _super);
    function DlDateAdapterString(inputFormats, modelFormat) {
        var _this = _super.call(this) || this;
        _this.inputFormats = inputFormats;
        _this.modelFormat = modelFormat;
        return _this;
    }
    DlDateAdapterString.prototype.fromMilliseconds = function (milliseconds) {
        return moment$1(milliseconds).format(this.modelFormat);
    };
    DlDateAdapterString.prototype.toMilliseconds = function (value) {
        if (value !== undefined && value !== null) {
            var newMoment = moment$1(value, this.inputFormats, true);
            return newMoment.isValid() ? newMoment.valueOf() : undefined;
        }
    };
    return DlDateAdapterString;
}(DlDateAdapter));
DlDateAdapterString.ctorParameters = function () { return [
    { type: Array, decorators: [{ type: core.Inject, args: [DL_STRING_DATE_INPUT_FORMATS,] },] },
    { type: undefined, decorators: [{ type: core.Inject, args: [DL_STRING_DATE_OUTPUT_FORMAT,] },] },
]; };
var DlDateTimePickerChange =               (function () {
    function DlDateTimePickerChange(newValue) {
        this._value = newValue;
    }
    Object.defineProperty(DlDateTimePickerChange.prototype, "value", {
        get: function () {
            return this._value;
        },
        enumerable: true,
        configurable: true
    });
    return DlDateTimePickerChange;
}());
var moment$2 = _moment;
var DlYearModelProvider =               (function () {
    function DlYearModelProvider() {
    }
    DlYearModelProvider.getStartOfDecade = function (fromMilliseconds) {
        var startDecade = (Math.trunc(moment$2(fromMilliseconds).year() / 10) * 10);
        return moment$2({ year: startDecade }).startOf('year');
    };
    DlYearModelProvider.prototype.onChanges = function (changes) {
    };
    DlYearModelProvider.prototype.getModel = function (milliseconds, selectedMilliseconds) {
        var rowNumbers = [0, 1];
        var columnNumbers = [0, 1, 2, 3, 4];
        var startYear = moment$2(milliseconds).startOf('year');
        var startDate = DlYearModelProvider.getStartOfDecade(milliseconds);
        var futureYear = startDate.year() + 9;
        var pastYear = startDate.year();
        var activeValue = startYear.valueOf();
        var selectedValue = selectedMilliseconds === null || selectedMilliseconds === undefined
            ? selectedMilliseconds
            : moment$2(selectedMilliseconds).startOf('year').valueOf();
        var result = {
            viewName: 'year',
            viewLabel: pastYear + "-" + futureYear,
            activeDate: activeValue,
            leftButton: {
                value: moment$2(startDate).subtract(10, 'years').valueOf(),
                ariaLabel: "Go to " + (pastYear - 10) + "-" + (pastYear - 1),
                classes: {},
            },
            rightButton: {
                value: moment$2(startDate).add(10, 'years').valueOf(),
                ariaLabel: "Go to " + (futureYear + 1) + "-" + (futureYear + 10),
                classes: {},
            },
            rows: rowNumbers.map(rowOfYears.bind(this))
        };
        result.leftButton.classes["" + result.leftButton.value] = true;
        result.rightButton.classes["" + result.rightButton.value] = true;
        return result;
        function rowOfYears(rowNumber) {
            var currentMoment = moment$2();
            var cells = columnNumbers.map(function (columnNumber) {
                var yearMoment = moment$2(startDate).add((rowNumber * columnNumbers.length) + columnNumber, 'years');
                return {
                    display: yearMoment.format('YYYY'),
                    value: yearMoment.valueOf(),
                    classes: {
                        'dl-abdtp-active': activeValue === yearMoment.valueOf(),
                        'dl-abdtp-selected': selectedValue === yearMoment.valueOf(),
                        'dl-abdtp-now': yearMoment.isSame(currentMoment, 'year'),
                    }
                };
            });
            return { cells: cells };
        }
    };
    DlYearModelProvider.prototype.goDown = function (fromMilliseconds, selectedMilliseconds) {
        return this.getModel(moment$2(fromMilliseconds).add(5, 'year').valueOf(), selectedMilliseconds);
    };
    DlYearModelProvider.prototype.goUp = function (fromMilliseconds, selectedMilliseconds) {
        return this.getModel(moment$2(fromMilliseconds).subtract(5, 'year').valueOf(), selectedMilliseconds);
    };
    DlYearModelProvider.prototype.goLeft = function (fromMilliseconds, selectedMilliseconds) {
        return this.getModel(moment$2(fromMilliseconds).subtract(1, 'year').valueOf(), selectedMilliseconds);
    };
    DlYearModelProvider.prototype.goRight = function (fromMilliseconds, selectedMilliseconds) {
        return this.getModel(moment$2(fromMilliseconds).add(1, 'year').valueOf(), selectedMilliseconds);
    };
    DlYearModelProvider.prototype.pageDown = function (fromMilliseconds, selectedMilliseconds) {
        return this.getModel(moment$2(fromMilliseconds).add(10, 'year').valueOf(), selectedMilliseconds);
    };
    DlYearModelProvider.prototype.pageUp = function (fromMilliseconds, selectedMilliseconds) {
        return this.getModel(moment$2(fromMilliseconds).subtract(10, 'year').valueOf(), selectedMilliseconds);
    };
    DlYearModelProvider.prototype.goEnd = function (fromMilliseconds, selectedMilliseconds) {
        return this.getModel(DlYearModelProvider.getStartOfDecade(fromMilliseconds)
            .add(9, 'years')
            .endOf('year')
            .valueOf(), selectedMilliseconds);
    };
    DlYearModelProvider.prototype.goHome = function (fromMilliseconds, selectedMilliseconds) {
        return this.getModel(DlYearModelProvider.getStartOfDecade(fromMilliseconds)
            .startOf('year')
            .valueOf(), selectedMilliseconds);
    };
    return DlYearModelProvider;
}());
var moment$3 = _moment;
var DlMonthModelProvider =               (function () {
    function DlMonthModelProvider() {
    }
    DlMonthModelProvider.prototype.onChanges = function (changes) {
    };
    DlMonthModelProvider.prototype.getModel = function (milliseconds, selectedMilliseconds) {
        var startDate = moment$3(milliseconds).startOf('year');
        var rowNumbers = [0, 1, 2];
        var columnNumbers = [0, 1, 2, 3];
        var previousYear = moment$3(startDate).subtract(1, 'year');
        var nextYear = moment$3(startDate).add(1, 'year');
        var activeValue = moment$3(milliseconds).startOf('month').valueOf();
        var selectedValue = selectedMilliseconds === null || selectedMilliseconds === undefined
            ? selectedMilliseconds
            : moment$3(selectedMilliseconds).startOf('month').valueOf();
        var result = {
            viewName: 'month',
            viewLabel: startDate.format('YYYY'),
            activeDate: activeValue,
            leftButton: {
                value: previousYear.valueOf(),
                ariaLabel: "Go to " + previousYear.format('YYYY'),
                classes: {},
            },
            upButton: {
                value: startDate.valueOf(),
                ariaLabel: "Go to " + startDate.format('YYYY'),
                classes: {},
            },
            rightButton: {
                value: nextYear.valueOf(),
                ariaLabel: "Go to " + nextYear.format('YYYY'),
                classes: {},
            },
            rows: rowNumbers.map(rowOfMonths)
        };
        result.leftButton.classes["" + result.leftButton.value] = true;
        result.rightButton.classes["" + result.rightButton.value] = true;
        return result;
        function rowOfMonths(rowNumber) {
            var currentMoment = moment$3();
            var cells = columnNumbers.map(function (columnNumber) {
                var monthMoment = moment$3(startDate).add((rowNumber * columnNumbers.length) + columnNumber, 'months');
                return {
                    display: monthMoment.format('MMM'),
                    ariaLabel: monthMoment.format('MMM YYYY'),
                    value: monthMoment.valueOf(),
                    classes: {
                        'dl-abdtp-active': activeValue === monthMoment.valueOf(),
                        'dl-abdtp-selected': selectedValue === monthMoment.valueOf(),
                        'dl-abdtp-now': monthMoment.isSame(currentMoment, 'month'),
                    }
                };
            });
            return { cells: cells };
        }
    };
    DlMonthModelProvider.prototype.goDown = function (fromMilliseconds, selectedMilliseconds) {
        return this.getModel(moment$3(fromMilliseconds).add(4, 'month').valueOf(), selectedMilliseconds);
    };
    DlMonthModelProvider.prototype.goUp = function (fromMilliseconds, selectedMilliseconds) {
        return this.getModel(moment$3(fromMilliseconds).subtract(4, 'month').valueOf(), selectedMilliseconds);
    };
    DlMonthModelProvider.prototype.goLeft = function (fromMilliseconds, selectedMilliseconds) {
        return this.getModel(moment$3(fromMilliseconds).subtract(1, 'month').valueOf(), selectedMilliseconds);
    };
    DlMonthModelProvider.prototype.goRight = function (fromMilliseconds, selectedMilliseconds) {
        return this.getModel(moment$3(fromMilliseconds).add(1, 'month').valueOf(), selectedMilliseconds);
    };
    DlMonthModelProvider.prototype.pageDown = function (fromMilliseconds, selectedMilliseconds) {
        return this.getModel(moment$3(fromMilliseconds).add(12, 'months').valueOf(), selectedMilliseconds);
    };
    DlMonthModelProvider.prototype.pageUp = function (fromMilliseconds, selectedMilliseconds) {
        return this.getModel(moment$3(fromMilliseconds).subtract(12, 'months').valueOf(), selectedMilliseconds);
    };
    DlMonthModelProvider.prototype.goEnd = function (fromMilliseconds, selectedMilliseconds) {
        return this.getModel(moment$3(fromMilliseconds).endOf('year').valueOf(), selectedMilliseconds);
    };
    DlMonthModelProvider.prototype.goHome = function (fromMilliseconds, selectedMilliseconds) {
        return this.getModel(moment$3(fromMilliseconds).startOf('year').valueOf(), selectedMilliseconds);
    };
    return DlMonthModelProvider;
}());
var moment$4 = _moment;
var DlDayModelProvider =               (function () {
    function DlDayModelProvider() {
    }
    DlDayModelProvider.prototype.onChanges = function (changes) {
    };
    DlDayModelProvider.prototype.getModel = function (milliseconds, selectedMilliseconds) {
        var startOfMonth = moment$4(milliseconds).startOf('month');
        var endOfMonth = moment$4(milliseconds).endOf('month');
        var startOfView = moment$4(startOfMonth).subtract(Math.abs(startOfMonth.weekday()), 'days');
        var rowNumbers = [0, 1, 2, 3, 4, 5];
        var columnNumbers = [0, 1, 2, 3, 4, 5, 6];
        var previousMonth = moment$4(startOfMonth).subtract(1, 'month');
        var nextMonth = moment$4(startOfMonth).add(1, 'month');
        var activeValue = moment$4(milliseconds).startOf('day').valueOf();
        var selectedValue = selectedMilliseconds === null || selectedMilliseconds === undefined
            ? selectedMilliseconds
            : moment$4(selectedMilliseconds).startOf('day').valueOf();
        var result = {
            viewName: 'day',
            viewLabel: startOfMonth.format('MMM YYYY'),
            activeDate: activeValue,
            leftButton: {
                value: previousMonth.valueOf(),
                ariaLabel: "Go to " + previousMonth.format('MMM YYYY'),
                classes: {},
            },
            upButton: {
                value: startOfMonth.valueOf(),
                ariaLabel: "Go to month view",
                classes: {},
            },
            rightButton: {
                value: nextMonth.valueOf(),
                ariaLabel: "Go to " + nextMonth.format('MMM YYYY'),
                classes: {},
            },
            rowLabels: columnNumbers.map(function (column) { return moment$4().weekday(column).format('dd'); }),
            rows: rowNumbers.map(rowOfDays)
        };
        result.leftButton.classes["" + result.leftButton.value] = true;
        result.rightButton.classes["" + result.rightButton.value] = true;
        return result;
        function rowOfDays(rowNumber) {
            var currentMoment = moment$4();
            var cells = columnNumbers.map(function (columnNumber) {
                var dayMoment = moment$4(startOfView).add((rowNumber * columnNumbers.length) + columnNumber, 'days');
                return {
                    display: dayMoment.format('D'),
                    ariaLabel: dayMoment.format('ll'),
                    value: dayMoment.valueOf(),
                    classes: {
                        'dl-abdtp-active': activeValue === dayMoment.valueOf(),
                        'dl-abdtp-future': dayMoment.isAfter(endOfMonth),
                        'dl-abdtp-past': dayMoment.isBefore(startOfMonth),
                        'dl-abdtp-selected': selectedValue === dayMoment.valueOf(),
                        'dl-abdtp-now': dayMoment.isSame(currentMoment, 'day'),
                    }
                };
            });
            return { cells: cells };
        }
    };
    DlDayModelProvider.prototype.goDown = function (fromMilliseconds, selectedMilliseconds) {
        return this.getModel(moment$4(fromMilliseconds).add(7, 'days').valueOf(), selectedMilliseconds);
    };
    DlDayModelProvider.prototype.goUp = function (fromMilliseconds, selectedMilliseconds) {
        return this.getModel(moment$4(fromMilliseconds).subtract(7, 'days').valueOf(), selectedMilliseconds);
    };
    DlDayModelProvider.prototype.goLeft = function (fromMilliseconds, selectedMilliseconds) {
        return this.getModel(moment$4(fromMilliseconds).subtract(1, 'day').valueOf(), selectedMilliseconds);
    };
    DlDayModelProvider.prototype.goRight = function (fromMilliseconds, selectedMilliseconds) {
        return this.getModel(moment$4(fromMilliseconds).add(1, 'day').valueOf(), selectedMilliseconds);
    };
    DlDayModelProvider.prototype.pageDown = function (fromMilliseconds, selectedMilliseconds) {
        return this.getModel(moment$4(fromMilliseconds).add(1, 'month').valueOf(), selectedMilliseconds);
    };
    DlDayModelProvider.prototype.pageUp = function (fromMilliseconds, selectedMilliseconds) {
        return this.getModel(moment$4(fromMilliseconds).subtract(1, 'month').valueOf(), selectedMilliseconds);
    };
    DlDayModelProvider.prototype.goEnd = function (fromMilliseconds, selectedMilliseconds) {
        return this.getModel(moment$4(fromMilliseconds)
            .endOf('month').startOf('day').valueOf(), selectedMilliseconds);
    };
    DlDayModelProvider.prototype.goHome = function (fromMilliseconds, selectedMilliseconds) {
        return this.getModel(moment$4(fromMilliseconds).startOf('month').valueOf(), selectedMilliseconds);
    };
    return DlDayModelProvider;
}());
var moment$5 = _moment;
var DlHourModelProvider =               (function () {
    function DlHourModelProvider() {
    }
    DlHourModelProvider.prototype.onChanges = function (changes) {
    };
    DlHourModelProvider.prototype.getModel = function (milliseconds, selectedMilliseconds) {
        var startDate = moment$5(milliseconds).startOf('day');
        var rowNumbers = [0, 1, 2, 3, 4, 5];
        var columnNumbers = [0, 1, 2, 3];
        var previousDay = moment$5(startDate).subtract(1, 'day');
        var nextDay = moment$5(startDate).add(1, 'day');
        var activeValue = moment$5(milliseconds).startOf('hour').valueOf();
        var selectedValue = selectedMilliseconds === null || selectedMilliseconds === undefined
            ? selectedMilliseconds
            : moment$5(selectedMilliseconds).startOf('hour').valueOf();
        var result = {
            viewName: 'hour',
            viewLabel: startDate.format('ll'),
            activeDate: activeValue,
            leftButton: {
                value: previousDay.valueOf(),
                ariaLabel: "Go to " + previousDay.format('ll'),
                classes: {},
            },
            upButton: {
                value: startDate.valueOf(),
                ariaLabel: "Go to " + startDate.format('MMM YYYY'),
                classes: {},
            },
            rightButton: {
                value: nextDay.valueOf(),
                ariaLabel: "Go to " + nextDay.format('ll'),
                classes: {},
            },
            rows: rowNumbers.map(rowOfHours)
        };
        result.leftButton.classes["" + result.leftButton.value] = true;
        result.rightButton.classes["" + result.rightButton.value] = true;
        return result;
        function rowOfHours(rowNumber) {
            var currentMoment = moment$5();
            var cells = columnNumbers.map(function (columnNumber) {
                var hourMoment = moment$5(startDate).add((rowNumber * columnNumbers.length) + columnNumber, 'hours');
                return {
                    display: hourMoment.format('LT'),
                    ariaLabel: hourMoment.format('LLL'),
                    value: hourMoment.valueOf(),
                    classes: {
                        'dl-abdtp-active': activeValue === hourMoment.valueOf(),
                        'dl-abdtp-selected': selectedValue === hourMoment.valueOf(),
                        'dl-abdtp-now': hourMoment.isSame(currentMoment, 'hour'),
                    }
                };
            });
            return { cells: cells };
        }
    };
    DlHourModelProvider.prototype.goDown = function (fromMilliseconds, selectedMilliseconds) {
        return this.getModel(moment$5(fromMilliseconds).add(4, 'hour').valueOf(), selectedMilliseconds);
    };
    DlHourModelProvider.prototype.goUp = function (fromMilliseconds, selectedMilliseconds) {
        return this.getModel(moment$5(fromMilliseconds).subtract(4, 'hour').valueOf(), selectedMilliseconds);
    };
    DlHourModelProvider.prototype.goLeft = function (fromMilliseconds, selectedMilliseconds) {
        return this.getModel(moment$5(fromMilliseconds).subtract(1, 'hour').valueOf(), selectedMilliseconds);
    };
    DlHourModelProvider.prototype.goRight = function (fromMilliseconds, selectedMilliseconds) {
        return this.getModel(moment$5(fromMilliseconds).add(1, 'hour').valueOf(), selectedMilliseconds);
    };
    DlHourModelProvider.prototype.pageDown = function (fromMilliseconds, selectedMilliseconds) {
        return this.getModel(moment$5(fromMilliseconds).add(1, 'day').valueOf(), selectedMilliseconds);
    };
    DlHourModelProvider.prototype.pageUp = function (fromMilliseconds, selectedMilliseconds) {
        return this.getModel(moment$5(fromMilliseconds).subtract(1, 'day').valueOf(), selectedMilliseconds);
    };
    DlHourModelProvider.prototype.goEnd = function (fromMilliseconds, selectedMilliseconds) {
        return this.getModel(moment$5(fromMilliseconds)
            .endOf('day')
            .startOf('hour')
            .valueOf(), selectedMilliseconds);
    };
    DlHourModelProvider.prototype.goHome = function (fromMilliseconds, selectedMilliseconds) {
        return this.getModel(moment$5(fromMilliseconds).startOf('day').valueOf(), selectedMilliseconds);
    };
    return DlHourModelProvider;
}());
var moment$6 = _moment;
var DlMinuteModelProvider =               (function () {
    function DlMinuteModelProvider() {
        this.step = 5;
    }
    DlMinuteModelProvider.prototype.onChanges = function (changes) {
        var minuteStepChange = changes['minuteStep'];
        if (minuteStepChange
            && (minuteStepChange.previousValue !== minuteStepChange.currentValue)) {
            this.step = minuteStepChange.currentValue;
            if (this.step === null || this.step === undefined) {
                this.step = 5;
            }
        }
    };
    DlMinuteModelProvider.prototype.getModel = function (milliseconds, selectedMilliseconds) {
        var _this = this;
        var startDate = moment$6(milliseconds).startOf('hour');
        var currentMilliseconds = moment$6().valueOf();
        var minuteSteps = new Array(Math.ceil(60 / this.step)).fill(0).map(function (value, index) { return index * _this.step; });
        var minuteValues = minuteSteps.map(function (minutesToAdd) { return moment$6(startDate).add(minutesToAdd, 'minutes').valueOf(); });
        var activeValue = moment$6(minuteValues.filter(function (value) { return value <= milliseconds; }).pop()).valueOf();
        var nowValue = currentMilliseconds >= startDate.valueOf() && currentMilliseconds <= moment$6(startDate).endOf('hour').valueOf()
            ? moment$6(minuteValues.filter(function (value) { return value <= currentMilliseconds; }).pop()).valueOf()
            : null;
        var previousHour = moment$6(startDate).subtract(1, 'hour');
        var nextHour = moment$6(startDate).add(1, 'hour');
        var selectedValue = selectedMilliseconds === null || selectedMilliseconds === undefined
            ? selectedMilliseconds
            : moment$6(minuteValues.filter(function (value) { return value <= selectedMilliseconds; }).pop()).valueOf();
        var rows = new Array(Math.ceil(minuteSteps.length / 4))
            .fill(0)
            .map(function (value, index) { return index; })
            .map(function (value) {
            return { cells: minuteSteps.slice((value * 4), (value * 4) + 4).map(rowOfMinutes) };
        });
        var result = {
            viewName: 'minute',
            viewLabel: startDate.format('lll'),
            activeDate: activeValue,
            leftButton: {
                value: previousHour.valueOf(),
                ariaLabel: "Go to " + previousHour.format('lll'),
                classes: {},
            },
            upButton: {
                value: startDate.valueOf(),
                ariaLabel: "Go to " + startDate.format('ll'),
                classes: {},
            },
            rightButton: {
                value: nextHour.valueOf(),
                ariaLabel: "Go to " + nextHour.format('lll'),
                classes: {},
            },
            rows: rows
        };
        result.leftButton.classes["" + result.leftButton.value] = true;
        result.rightButton.classes["" + result.rightButton.value] = true;
        return result;
        function rowOfMinutes(stepMinutes) {
            var minuteMoment = moment$6(startDate).add(stepMinutes, 'minutes');
            return {
                display: minuteMoment.format('LT'),
                ariaLabel: minuteMoment.format('LLL'),
                value: minuteMoment.valueOf(),
                classes: {
                    'dl-abdtp-active': activeValue === minuteMoment.valueOf(),
                    'dl-abdtp-selected': selectedValue === minuteMoment.valueOf(),
                    'dl-abdtp-now': nowValue === minuteMoment.valueOf(),
                }
            };
        }
    };
    DlMinuteModelProvider.prototype.goDown = function (fromMilliseconds, selectedMilliseconds) {
        return this.getModel(moment$6(fromMilliseconds).add(this.step * 4, 'minutes').valueOf(), selectedMilliseconds);
    };
    DlMinuteModelProvider.prototype.goUp = function (fromMilliseconds, selectedMilliseconds) {
        return this.getModel(moment$6(fromMilliseconds).subtract(this.step * 4, 'minutes').valueOf(), selectedMilliseconds);
    };
    DlMinuteModelProvider.prototype.goLeft = function (fromMilliseconds, selectedMilliseconds) {
        return this.getModel(moment$6(fromMilliseconds).subtract(this.step, 'minutes').valueOf(), selectedMilliseconds);
    };
    DlMinuteModelProvider.prototype.goRight = function (fromMilliseconds, selectedMilliseconds) {
        return this.getModel(moment$6(fromMilliseconds).add(this.step, 'minutes').valueOf(), selectedMilliseconds);
    };
    DlMinuteModelProvider.prototype.pageDown = function (fromMilliseconds, selectedMilliseconds) {
        return this.getModel(moment$6(fromMilliseconds).add(1, 'hour').valueOf(), selectedMilliseconds);
    };
    DlMinuteModelProvider.prototype.pageUp = function (fromMilliseconds, selectedMilliseconds) {
        return this.getModel(moment$6(fromMilliseconds).subtract(1, 'hour').valueOf(), selectedMilliseconds);
    };
    DlMinuteModelProvider.prototype.goEnd = function (fromMilliseconds, selectedMilliseconds) {
        return this.getModel(moment$6(fromMilliseconds)
            .endOf('hour')
            .valueOf(), selectedMilliseconds);
    };
    DlMinuteModelProvider.prototype.goHome = function (fromMilliseconds, selectedMilliseconds) {
        return this.getModel(moment$6(fromMilliseconds).startOf('hour').valueOf(), selectedMilliseconds);
    };
    return DlMinuteModelProvider;
}());
var moment$7 = _moment;
var keyCodeToModelProviderMethod = {
    33: 'pageUp',
    34: 'pageDown',
    35: 'goEnd',
    36: 'goHome',
    37: 'goLeft',
    38: 'goUp',
    39: 'goRight',
    40: 'goDown',
};
var VIEWS = [
    'minute',
    'hour',
    'day',
    'month',
    'year'
];
var DlDateTimePickerComponent =               (function () {
    function DlDateTimePickerComponent(_elementRef, _ngZone, _dateAdapter, yearModelComponent, monthModelComponent, dayModelComponent, hourModelComponent, minuteModelComponent) {
        this._elementRef = _elementRef;
        this._ngZone = _ngZone;
        this._dateAdapter = _dateAdapter;
        this.yearModelComponent = yearModelComponent;
        this.monthModelComponent = monthModelComponent;
        this.dayModelComponent = dayModelComponent;
        this.hourModelComponent = hourModelComponent;
        this.minuteModelComponent = minuteModelComponent;
        this.leftIconClass = [
            'oi',
            'oi-chevron-left'
        ];
        this.maxView = 'year';
        this.minuteStep = 5;
        this.minView = 'minute';
        this.rightIconClass = [
            'oi',
            'oi-chevron-right'
        ];
        this.startView = 'day';
        this.upIconClass = [
            'oi',
            'oi-chevron-top'
        ];
        this.change = new core.EventEmitter();
        this._changed = [];
        this._nextView = {
            'year': 'month',
            'month': 'day',
            'day': 'hour',
            'hour': 'minute'
        };
        this._previousView = {
            'minute': 'hour',
            'hour': 'day',
            'day': 'month',
            'month': 'year'
        };
        this._touched = [];
        this.selectFilter = function () { return true; };
        this._viewToModelProvider = {
            year: yearModelComponent,
            month: monthModelComponent,
            day: dayModelComponent,
            hour: hourModelComponent,
            minute: minuteModelComponent,
        };
    }
    DlDateTimePickerComponent.prototype.ngOnChanges = function (changes) {
        var _this = this;
        Object.keys(this._viewToModelProvider)
            .map(function (key) { return _this._viewToModelProvider[key]; })
            .forEach(function (provider) { return provider.onChanges(changes); });
        if (this._model) {
            this.model = this._viewToModelProvider[this._model.viewName].getModel(this._model.activeDate, this.valueOf);
        }
    };
    DlDateTimePickerComponent.prototype.ngOnInit = function () {
        this.model = this._viewToModelProvider[this.getStartView()].getModel(this.getStartDate(), this.valueOf);
    };
    DlDateTimePickerComponent.prototype._onDateClick = function (dateButton) {
        if (dateButton.classes['dl-abdtp-disabled']) {
            return;
        }
        var nextView = this._nextView[this._model.viewName];
        if ((this.minView || 'minute') === this._model.viewName) {
            this.value = this._dateAdapter.fromMilliseconds(dateButton.value);
            nextView = this.startView;
        }
        this.model = this._viewToModelProvider[nextView].getModel(dateButton.value, this.valueOf);
        this.onTouch();
    };
    DlDateTimePickerComponent.prototype._onLeftClick = function () {
        this.model = this._viewToModelProvider[this._model.viewName].getModel(this._model.leftButton.value, this.valueOf);
        this.onTouch();
    };
    DlDateTimePickerComponent.prototype._onUpClick = function () {
        this.model = this._viewToModelProvider[this._previousView[this._model.viewName]].getModel(this._model.upButton.value, this.valueOf);
    };
    DlDateTimePickerComponent.prototype._onRightClick = function () {
        this.model = this._viewToModelProvider[this._model.viewName].getModel(this._model.rightButton.value, this.valueOf);
        this.onTouch();
    };
    DlDateTimePickerComponent.prototype._handleKeyDown = function ($event) {
        var functionName = keyCodeToModelProviderMethod[$event.keyCode];
        if (functionName) {
            var modelProvider = this._viewToModelProvider[this._model.viewName];
            this.model = modelProvider[functionName](this._model.activeDate, this.valueOf);
            this.focusActiveCell();
            $event.preventDefault();
        }
    };
    DlDateTimePickerComponent.prototype.applySelectFilter = function (model) {
        var _this = this;
        if (this.selectFilter) {
            model.rows = model.rows.map(function (row) {
                row.cells.map(function (dateButton) {
                    var disabled = !_this.selectFilter(dateButton, model.viewName);
                    dateButton.classes['dl-abdtp-disabled'] = disabled;
                    if (disabled) {
                        dateButton.classes['aria-disabled'] = true;
                    }
                    return dateButton;
                });
                return row;
            });
        }
        return model;
    };
    DlDateTimePickerComponent.prototype.focusActiveCell = function () {
        var _this = this;
        this._ngZone.runOutsideAngular(function () {
            _this._ngZone.onStable.asObservable().pipe(operators.take(1)).subscribe(function () {
                _this._elementRef.nativeElement.querySelector('.dl-abdtp-active').focus();
            });
        });
    };
    DlDateTimePickerComponent.prototype.getStartDate = function () {
        if (hasValue(this._value)) {
            return this._dateAdapter.toMilliseconds(this._value);
        }
        if (hasValue(this.startDate)) {
            return this.startDate;
        }
        return moment$7().valueOf();
    };
    DlDateTimePickerComponent.prototype.getStartView = function () {
        var startIndex = Math.max(VIEWS.indexOf(this.minView || 'minute'), VIEWS.indexOf(this.startView || 'day'));
        return VIEWS[startIndex];
    };
    Object.defineProperty(DlDateTimePickerComponent.prototype, "model", {
        set: function (model) {
            this._model = this.applySelectFilter(model);
        },
        enumerable: true,
        configurable: true
    });
    DlDateTimePickerComponent.prototype.onTouch = function () {
        this._touched.forEach(function (onTouch) { return onTouch(); });
    };
    DlDateTimePickerComponent.prototype.registerOnChange = function (fn) {
        this._changed.push(fn);
    };
    DlDateTimePickerComponent.prototype.registerOnTouched = function (fn) {
        this._touched.push(fn);
    };
    Object.defineProperty(DlDateTimePickerComponent.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (value) {
            if (this._value !== value) {
                this._value = value;
                this.model = this._viewToModelProvider[this._model.viewName].getModel(this.getStartDate(), this.valueOf);
                this._changed.forEach(function (f) { return f(value); });
                this.change.emit(new DlDateTimePickerChange(value));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DlDateTimePickerComponent.prototype, "valueOf", {
        get: function () {
            return this._dateAdapter.toMilliseconds(this._value);
        },
        enumerable: true,
        configurable: true
    });
    DlDateTimePickerComponent.prototype.writeValue = function (value) {
        this.value = value;
    };
    return DlDateTimePickerComponent;
}());
DlDateTimePickerComponent.decorators = [
    { type: core.Component, args: [{
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                providers: [
                    {
                        provide: forms.NG_VALUE_ACCESSOR,
                        useExisting: DlDateTimePickerComponent,
                        multi: true
                    }
                ],
                selector: 'dl-date-time-picker',
                styles: [":host{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.dl-abdtp-col-label,.dl-abdtp-view-label{font-weight:700}.dl-abdtp-date-button,.dl-abdtp-left-button,.dl-abdtp-right-button,.dl-abdtp-view-label{padding:5px;border-radius:999px;cursor:pointer;color:rgba(0,0,0,.87);outline:0}.dl-abdtp-date-button,.dl-abdtp-left-button,.dl-abdtp-right-button,.dl-abdtp-up-button{border-width:0}.dl-abdtp-active:focus,.dl-abdtp-date-button:focus,.dl-abdtp-date-button:hover,.dl-abdtp-left-button:focus,.dl-abdtp-left-button:hover,.dl-abdtp-right-button:focus,.dl-abdtp-right-button:hover,.dl-abdtp-up-button:focus,.dl-abdtp-up-button:hover,.dl-abdtp-view-label:focus{background:rgba(0,0,0,.04)}.dl-abdtp-future,.dl-abdtp-past{color:rgba(0,0,0,.04)}.dl-abdtp-now,.dl-abdtp-now.disabled,.dl-abdtp-now.disabled:hover,.dl-abdtp-now:hover{border-radius:999px;border:1px solid rgba(0,0,0,.25)}.dl-abdtp-selected{color:#fff;background:rgba(0,82,204,.75)}.dl-abdtp-selected:focus,.dl-abdtp-selected:hover{background:#0052cc}.dl-abdtp-disabled{cursor:default;color:rgba(0,0,0,.25)}"],
                template: "<div class=\"text-center dl-abdtp-{{_model.viewName}}-view \">\n  <div class=\"row align-items-center no-gutters\">\n    <button class=\"col dl-abdtp-left-button align-items-center\"\n            type=\"button\"\n            [attr.aria-label]=\"_model.leftButton.ariaLabel\"\n            [attr.title]=\"_model.leftButton.ariaLabel\"\n            [ngClass]=\"_model.leftButton.classes\"\n            (click)=\"_onLeftClick()\">\n      <span class=\"left-icon\" [ngClass]=\"leftIconClass\"></span>\n    </button>\n    <div *ngIf=\"_model.viewName === (this.maxView || 'year'); then maxViewLabel else defaultViewLabel;\"></div>\n    <button class=\"col dl-abdtp-right-button\"\n            type=\"button\"\n            [attr.aria-label]=\"_model.rightButton.ariaLabel\"\n            [attr.title]=\"_model.rightButton.ariaLabel\"\n            (click)=\"_onRightClick()\"\n            [ngClass]=\"_model.rightButton.classes\">\n      <span class=\"right-icon\" [ngClass]=\"rightIconClass\"></span>\n    </button>\n  </div>\n  <div (keydown)=\"_handleKeyDown($event)\">\n    <div *ngIf=\"_model.rowLabels?.length\" class=\"row no-gutters\">\n      <div *ngFor=\"let label of _model.rowLabels\" class=\"col align-items-center no-gutters dl-abdtp-col-label\">{{label}}</div>\n    </div>\n    <div *ngFor=\"let row of _model.rows\" class=\"row align-items-center no-gutters\">\n      <div *ngFor=\"let cell of row.cells\"\n           role=\"gridcell\"\n           class=\"col dl-abdtp-date-button dl-abdtp-{{_model.viewName}} {{cell.value}}\"\n           [ngClass]=\"cell.classes\"\n           [attr.aria-label]=\"cell.ariaLabel\"\n           [attr.aria-disabled]=\"cell.classes['dl-abdtp-disabled']\"\n           [attr.tabindex]=\"cell.classes['dl-abdtp-active'] ? 0 : -1\"\n           (click)=\"_onDateClick(cell)\"\n           (keydown.space)=\"_onDateClick(cell)\"\n           (keydown.enter)=\"_onDateClick(cell)\"\n      >{{cell.display}}</div>\n    </div>\n  </div>\n</div>\n<ng-template #maxViewLabel>\n  <div class=\"col-10 dl-abdtp-view-label\">{{_model.viewLabel}}</div>\n</ng-template>\n<ng-template #defaultViewLabel>\n  <button class=\"col-10 dl-abdtp-view-label dl-abdtp-up-button\"\n          type=\"button\"\n          [attr.aria-label]=\"_model.upButton.ariaLabel\"\n          [attr.title]=\"_model.upButton.ariaLabel\"\n          (click)=\"_onUpClick()\"\n          [ngClass]=\"_model.upButton.classes\"\n  >{{_model.viewLabel}}&nbsp;<span class=\"up-icon\" [ngClass]=\"upIconClass\"></span>\n  </button>\n</ng-template>\n",
            },] },
];
DlDateTimePickerComponent.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: core.NgZone, },
    { type: DlDateAdapter, },
    { type: DlYearModelProvider, },
    { type: DlMonthModelProvider, },
    { type: DlDayModelProvider, },
    { type: DlHourModelProvider, },
    { type: DlMinuteModelProvider, },
]; };
DlDateTimePickerComponent.propDecorators = {
    "leftIconClass": [{ type: core.Input },],
    "maxView": [{ type: core.Input },],
    "minuteStep": [{ type: core.Input },],
    "minView": [{ type: core.Input },],
    "rightIconClass": [{ type: core.Input },],
    "startDate": [{ type: core.Input },],
    "startView": [{ type: core.Input },],
    "upIconClass": [{ type: core.Input },],
    "change": [{ type: core.Output },],
    "selectFilter": [{ type: core.Input },],
};
function hasValue(value) {
    return (typeof value !== 'undefined') && (value !== null);
}
var moment$8 = _moment;
var LONG_DATE_FORMAT = moment$8.localeData().longDateFormat('lll');
var INPUT_FORMATS = [
    'YYYY-MM-DDTHH:mm',
    'YYYY-MM-DDTHH:mm:ss',
    'YYYY-MM-DDTHH:mm:ss.SSS',
    'YYYY-MM-DD',
    LONG_DATE_FORMAT,
    moment$8.ISO_8601
];
var DlDateTimePickerModule =               (function () {
    function DlDateTimePickerModule() {
    }
    return DlDateTimePickerModule;
}());
DlDateTimePickerModule.decorators = [
    { type: core.NgModule, args: [{
                declarations: [DlDateTimePickerComponent],
                imports: [common.CommonModule],
                exports: [DlDateTimePickerComponent],
                providers: [
                    DlYearModelProvider,
                    DlMonthModelProvider,
                    DlDayModelProvider,
                    DlHourModelProvider,
                    DlMinuteModelProvider
                ],
            },] },
];
var DlDateTimePickerNumberModule =               (function () {
    function DlDateTimePickerNumberModule() {
    }
    return DlDateTimePickerNumberModule;
}());
DlDateTimePickerNumberModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [DlDateTimePickerModule],
                exports: [DlDateTimePickerComponent],
                providers: [{ provide: DlDateAdapter, useClass: DlDateAdapterNumber }],
            },] },
];
var DlDateTimePickerDateModule =               (function () {
    function DlDateTimePickerDateModule() {
    }
    return DlDateTimePickerDateModule;
}());
DlDateTimePickerDateModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [DlDateTimePickerModule],
                exports: [DlDateTimePickerComponent],
                providers: [{ provide: DlDateAdapter, useClass: DlDateAdapterNative }],
            },] },
];
var DlDateTimePickerMomentModule =               (function () {
    function DlDateTimePickerMomentModule() {
    }
    return DlDateTimePickerMomentModule;
}());
DlDateTimePickerMomentModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [DlDateTimePickerModule],
                exports: [DlDateTimePickerComponent],
                providers: [{ provide: DlDateAdapter, useClass: DlDateAdapterMoment }],
            },] },
];
var DlDateTimePickerStringModule =               (function () {
    function DlDateTimePickerStringModule() {
    }
    return DlDateTimePickerStringModule;
}());
DlDateTimePickerStringModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [DlDateTimePickerModule],
                exports: [DlDateTimePickerComponent],
                providers: [
                    { provide: DL_STRING_DATE_INPUT_FORMATS, useValue: INPUT_FORMATS },
                    { provide: DL_STRING_DATE_OUTPUT_FORMAT, useValue: LONG_DATE_FORMAT },
                    { provide: DlDateAdapter, useClass: DlDateAdapterString }
                ],
            },] },
];

exports.DlDateAdapter = DlDateAdapter;
exports.DlDateAdapterMoment = DlDateAdapterMoment;
exports.DlDateAdapterNative = DlDateAdapterNative;
exports.DlDateAdapterNumber = DlDateAdapterNumber;
exports.DL_STRING_DATE_OUTPUT_FORMAT = DL_STRING_DATE_OUTPUT_FORMAT;
exports.DL_STRING_DATE_INPUT_FORMATS = DL_STRING_DATE_INPUT_FORMATS;
exports.DlDateAdapterString = DlDateAdapterString;
exports.DlDateTimePickerChange = DlDateTimePickerChange;
exports.DlDateTimePickerComponent = DlDateTimePickerComponent;
exports.LONG_DATE_FORMAT = LONG_DATE_FORMAT;
exports.INPUT_FORMATS = INPUT_FORMATS;
exports.DlDateTimePickerModule = DlDateTimePickerModule;
exports.DlDateTimePickerNumberModule = DlDateTimePickerNumberModule;
exports.DlDateTimePickerDateModule = DlDateTimePickerDateModule;
exports.DlDateTimePickerMomentModule = DlDateTimePickerMomentModule;
exports.DlDateTimePickerStringModule = DlDateTimePickerStringModule;
exports.DlDayModelProvider = DlDayModelProvider;
exports.DlHourModelProvider = DlHourModelProvider;
exports.DlMinuteModelProvider = DlMinuteModelProvider;
exports.DlMonthModelProvider = DlMonthModelProvider;
exports.DlYearModelProvider = DlYearModelProvider;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=angular-bootstrap-datetimepicker.umd.js.map
