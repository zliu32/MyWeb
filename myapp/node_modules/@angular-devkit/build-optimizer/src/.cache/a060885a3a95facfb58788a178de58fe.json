{"remainingRequest":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@swimlane\\ngx-charts\\release\\polar-chart\\polar-series.component.js","dependencies":[{"path":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@swimlane\\ngx-charts\\release\\polar-chart\\polar-series.component.js","mtime":499162500000},{"path":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1529671348740},{"path":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { __decorate } from \"tslib\";\nimport { __metadata } from \"tslib\";\nimport { Component, Input, ChangeDetectionStrategy, TemplateRef } from '@angular/core';\nimport { radialLine } from 'd3-shape';\nimport { id } from '../utils/id';\nimport { sortLinear, sortByTime, sortByDomain } from '../utils/sort';\nvar PolarSeriesComponent = /** @class */ /*@__PURE__*/ (function () {\n    function PolarSeriesComponent() {\n        this.tooltipDisabled = false;\n        this.gradient = false;\n        this.animations = true;\n        this.circleRadius = 3;\n    }\n    PolarSeriesComponent.prototype.ngOnChanges = function (changes) {\n        this.update();\n    };\n    PolarSeriesComponent.prototype.update = function () {\n        var _this = this;\n        this.updateGradients();\n        var line = this.getLineGenerator();\n        var data = this.sortData(this.data.series);\n        var seriesName = this.data.name;\n        var linearScaleType = this.colors.scaleType === 'linear';\n        var min = this.yScale.domain()[0];\n        this.seriesColor = this.colors.getColor(linearScaleType ? min : seriesName);\n        this.path = line(data) || '';\n        this.circles = data.map(function (d) {\n            var a = _this.getAngle(d);\n            var r = _this.getRadius(d);\n            var value = d.value;\n            var color = _this.colors.getColor(linearScaleType ? Math.abs(value) : seriesName);\n            var cData = {\n                series: seriesName,\n                value: value,\n                name: d.name\n            };\n            return {\n                data: cData,\n                cx: r * Math.sin(a),\n                cy: -r * Math.cos(a),\n                value: value,\n                color: color,\n                label: d.name\n            };\n        });\n        this.active = this.isActive(this.data);\n        this.inactive = this.isInactive(this.data);\n        this.tooltipText = this.tooltipText || (function (c) { return _this.defaultTooltipText(c); });\n    };\n    PolarSeriesComponent.prototype.getAngle = function (d) {\n        var label = d.name;\n        if (this.scaleType === 'time') {\n            return this.xScale(label);\n        }\n        else if (this.scaleType === 'linear') {\n            return this.xScale(Number(label));\n        }\n        return this.xScale(label);\n    };\n    PolarSeriesComponent.prototype.getRadius = function (d) {\n        return this.yScale(d.value);\n    };\n    PolarSeriesComponent.prototype.getLineGenerator = function () {\n        var _this = this;\n        return radialLine()\n            .angle(function (d) { return _this.getAngle(d); })\n            .radius(function (d) { return _this.getRadius(d); })\n            .curve(this.curve);\n    };\n    PolarSeriesComponent.prototype.sortData = function (data) {\n        if (this.scaleType === 'linear') {\n            return sortLinear(data, 'name');\n        }\n        else if (this.scaleType === 'time') {\n            return sortByTime(data, 'name');\n        }\n        return sortByDomain(data, 'name', 'asc', this.xScale.domain());\n    };\n    PolarSeriesComponent.prototype.isActive = function (entry) {\n        if (!this.activeEntries)\n            return false;\n        var item = this.activeEntries.find(function (d) {\n            return entry.name === d.name;\n        });\n        return item !== undefined;\n    };\n    PolarSeriesComponent.prototype.isInactive = function (entry) {\n        if (!this.activeEntries || this.activeEntries.length === 0)\n            return false;\n        var item = this.activeEntries.find(function (d) {\n            return entry.name === d.name;\n        });\n        return item === undefined;\n    };\n    PolarSeriesComponent.prototype.defaultTooltipText = function (_a) {\n        var label = _a.label, value = _a.value;\n        return \"\\n      <span class=\\\"tooltip-label\\\">\" + this.data.name + \" \\u2022 \" + label + \"</span>\\n      <span class=\\\"tooltip-val\\\">\" + value.toLocaleString() + \"</span>\\n    \";\n    };\n    PolarSeriesComponent.prototype.updateGradients = function () {\n        this.hasGradient = this.gradient || this.colors.scaleType === 'linear';\n        if (!this.hasGradient) {\n            return;\n        }\n        this.gradientId = 'grad' + id().toString();\n        this.gradientUrl = \"url(#\" + this.gradientId + \")\";\n        if (this.colors.scaleType === 'linear') {\n            var values = this.data.series.map(function (d) { return d.value; });\n            var max = Math.max.apply(Math, values);\n            var min = Math.min.apply(Math, values);\n            this.gradientStops = this.colors.getLinearGradientStops(max, min);\n        }\n        else {\n            this.gradientStops = undefined;\n        }\n    };\n    return PolarSeriesComponent;\n}());\nexport { PolarSeriesComponent };\n//# sourceMappingURL=polar-series.component.js.map\n",null]}