{"remainingRequest":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\ng-pick-datetime\\date-time\\adapter\\native-date-time-adapter.class.js","dependencies":[{"path":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\ng-pick-datetime\\date-time\\adapter\\native-date-time-adapter.class.js","mtime":1529904269000},{"path":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1529671348740},{"path":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s)\n            if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n    }\n    return t;\n};\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport { DateTimeAdapter, OWL_DATE_TIME_LOCALE } from './date-time-adapter.class';\nvar DEFAULT_MONTH_NAMES = {\n    'long': [\n        'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n        'October', 'November', 'December'\n    ],\n    'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n    'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\nvar DEFAULT_DAY_OF_WEEK_NAMES = {\n    'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n    'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\nvar SUPPORTS_INTL_API = typeof Intl !== 'undefined';\nvar ISO_8601_REGEX = /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\nfunction range(length, valueFunction) {\n    var valuesArray = Array(length);\n    for (var i = 0; i < length; i++) {\n        valuesArray[i] = valueFunction(i);\n    }\n    return valuesArray;\n}\nvar NativeDateTimeAdapter = /*@__PURE__*/ (function (_super) {\n    __extends(NativeDateTimeAdapter, _super);\n    function NativeDateTimeAdapter(owlDateTimeLocale) {\n        var _this = _super.call(this) || this;\n        _this.owlDateTimeLocale = owlDateTimeLocale;\n        _super.prototype.setLocale.call(_this, owlDateTimeLocale);\n        _this.useUtcForDisplay = !(typeof document === 'object' && !!document &&\n            /(msie|trident)/i.test(navigator.userAgent));\n        return _this;\n    }\n    NativeDateTimeAdapter.prototype.getYear = function (date) {\n        return date.getFullYear();\n    };\n    NativeDateTimeAdapter.prototype.getMonth = function (date) {\n        return date.getMonth();\n    };\n    NativeDateTimeAdapter.prototype.getDay = function (date) {\n        return date.getDay();\n    };\n    NativeDateTimeAdapter.prototype.getDate = function (date) {\n        return date.getDate();\n    };\n    NativeDateTimeAdapter.prototype.getHours = function (date) {\n        return date.getHours();\n    };\n    NativeDateTimeAdapter.prototype.getMinutes = function (date) {\n        return date.getMinutes();\n    };\n    NativeDateTimeAdapter.prototype.getSeconds = function (date) {\n        return date.getSeconds();\n    };\n    NativeDateTimeAdapter.prototype.getTime = function (date) {\n        return date.getTime();\n    };\n    NativeDateTimeAdapter.prototype.getNumDaysInMonth = function (date) {\n        var lastDateOfMonth = this.createDateWithOverflow(this.getYear(date), this.getMonth(date) + 1, 0);\n        return this.getDate(lastDateOfMonth);\n    };\n    NativeDateTimeAdapter.prototype.differenceInCalendarDays = function (dateLeft, dateRight) {\n        if (this.isValid(dateLeft) && this.isValid(dateRight)) {\n            var dateLeftStartOfDay = this.createDate(this.getYear(dateLeft), this.getMonth(dateLeft), this.getDate(dateLeft));\n            var dateRightStartOfDay = this.createDate(this.getYear(dateRight), this.getMonth(dateRight), this.getDate(dateRight));\n            var timeStampLeft = this.getTime(dateLeftStartOfDay) - dateLeftStartOfDay.getTimezoneOffset() * this.milliseondsInMinute;\n            var timeStampRight = this.getTime(dateRightStartOfDay) - dateRightStartOfDay.getTimezoneOffset() * this.milliseondsInMinute;\n            return Math.round((timeStampLeft - timeStampRight) / this.millisecondsInDay);\n        }\n        else {\n            return null;\n        }\n    };\n    NativeDateTimeAdapter.prototype.getYearName = function (date) {\n        if (SUPPORTS_INTL_API) {\n            var dtf = new Intl.DateTimeFormat(this.locale, { year: 'numeric' });\n            return this.stripDirectionalityCharacters(dtf.format(date));\n        }\n        return String(this.getYear(date));\n    };\n    NativeDateTimeAdapter.prototype.getMonthNames = function (style) {\n        var _this = this;\n        if (SUPPORTS_INTL_API) {\n            var dtf_1 = new Intl.DateTimeFormat(this.locale, { month: style });\n            return range(12, function (i) { return _this.stripDirectionalityCharacters(dtf_1.format(new Date(2017, i, 1))); });\n        }\n        return DEFAULT_MONTH_NAMES[style];\n    };\n    NativeDateTimeAdapter.prototype.getDayOfWeekNames = function (style) {\n        var _this = this;\n        if (SUPPORTS_INTL_API) {\n            var dtf_2 = new Intl.DateTimeFormat(this.locale, { weekday: style });\n            return range(7, function (i) {\n                return _this.stripDirectionalityCharacters(dtf_2.format(new Date(2017, 0, i + 1)));\n            });\n        }\n        return DEFAULT_DAY_OF_WEEK_NAMES[style];\n    };\n    NativeDateTimeAdapter.prototype.toIso8601 = function (date) {\n        return date.toISOString();\n    };\n    NativeDateTimeAdapter.prototype.isEqual = function (dateLeft, dateRight) {\n        if (this.isValid(dateLeft) && this.isValid(dateRight)) {\n            return dateLeft.getTime() === dateRight.getTime();\n        }\n        else {\n            return false;\n        }\n    };\n    NativeDateTimeAdapter.prototype.isSameDay = function (dateLeft, dateRight) {\n        if (this.isValid(dateLeft) && this.isValid(dateRight)) {\n            var dateLeftStartOfDay = this.clone(dateLeft);\n            var dateRightStartOfDay = this.clone(dateRight);\n            dateLeftStartOfDay.setHours(0, 0, 0, 0);\n            dateRightStartOfDay.setHours(0, 0, 0, 0);\n            return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();\n        }\n        else {\n            return false;\n        }\n    };\n    NativeDateTimeAdapter.prototype.isValid = function (date) {\n        return date && !isNaN(date.getTime());\n    };\n    NativeDateTimeAdapter.prototype.invalid = function () {\n        return new Date(NaN);\n    };\n    NativeDateTimeAdapter.prototype.isDateInstance = function (obj) {\n        return obj instanceof Date;\n    };\n    NativeDateTimeAdapter.prototype.addCalendarYears = function (date, amount) {\n        return this.addCalendarMonths(date, amount * 12);\n    };\n    NativeDateTimeAdapter.prototype.addCalendarMonths = function (date, amount) {\n        var result = this.clone(date);\n        amount = Number(amount);\n        var desiredMonth = result.getMonth() + amount;\n        var dateWithDesiredMonth = new Date(0);\n        dateWithDesiredMonth.setFullYear(result.getFullYear(), desiredMonth, 1);\n        dateWithDesiredMonth.setHours(0, 0, 0, 0);\n        var daysInMonth = this.getNumDaysInMonth(dateWithDesiredMonth);\n        result.setMonth(desiredMonth, Math.min(daysInMonth, result.getDate()));\n        return result;\n    };\n    NativeDateTimeAdapter.prototype.addCalendarDays = function (date, amount) {\n        var result = this.clone(date);\n        amount = Number(amount);\n        result.setDate(result.getDate() + amount);\n        return result;\n    };\n    NativeDateTimeAdapter.prototype.setHours = function (date, amount) {\n        var result = this.clone(date);\n        result.setHours(amount);\n        return result;\n    };\n    NativeDateTimeAdapter.prototype.setMinutes = function (date, amount) {\n        var result = this.clone(date);\n        result.setMinutes(amount);\n        return result;\n    };\n    NativeDateTimeAdapter.prototype.setSeconds = function (date, amount) {\n        var result = this.clone(date);\n        result.setSeconds(amount);\n        return result;\n    };\n    NativeDateTimeAdapter.prototype.createDate = function (year, month, date, hours, minutes, seconds) {\n        if (hours === void 0) {\n            hours = 0;\n        }\n        if (minutes === void 0) {\n            minutes = 0;\n        }\n        if (seconds === void 0) {\n            seconds = 0;\n        }\n        if (month < 0 || month > 11) {\n            throw Error(\"Invalid month index \\\"\" + month + \"\\\". Month index has to be between 0 and 11.\");\n        }\n        if (date < 1) {\n            throw Error(\"Invalid date \\\"\" + date + \"\\\". Date has to be greater than 0.\");\n        }\n        if (hours < 0 || hours > 23) {\n            throw Error(\"Invalid hours \\\"\" + hours + \"\\\". Hours has to be between 0 and 23.\");\n        }\n        if (minutes < 0 || minutes > 59) {\n            throw Error(\"Invalid minutes \\\"\" + minutes + \"\\\". Minutes has to between 0 and 59.\");\n        }\n        if (seconds < 0 || seconds > 59) {\n            throw Error(\"Invalid seconds \\\"\" + seconds + \"\\\". Seconds has to be between 0 and 59.\");\n        }\n        var result = this.createDateWithOverflow(year, month, date, hours, minutes, seconds);\n        if (result.getMonth() !== month) {\n            throw Error(\"Invalid date \\\"\" + date + \"\\\" for month with index \\\"\" + month + \"\\\".\");\n        }\n        return result;\n    };\n    NativeDateTimeAdapter.prototype.clone = function (date) {\n        return new Date(date.getTime());\n    };\n    NativeDateTimeAdapter.prototype.now = function () {\n        return new Date();\n    };\n    NativeDateTimeAdapter.prototype.format = function (date, displayFormat) {\n        if (!this.isValid(date)) {\n            throw Error('JSNativeDate: Cannot format invalid date.');\n        }\n        if (SUPPORTS_INTL_API) {\n            if (this.useUtcForDisplay) {\n                date = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n                displayFormat = __assign({}, displayFormat, { timeZone: 'utc' });\n            }\n            var dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n            return this.stripDirectionalityCharacters(dtf.format(date));\n        }\n        return this.stripDirectionalityCharacters(date.toDateString());\n    };\n    NativeDateTimeAdapter.prototype.parse = function (value, parseFormat) {\n        if (typeof value === 'number') {\n            return new Date(value);\n        }\n        return value ? new Date(Date.parse(value)) : null;\n    };\n    NativeDateTimeAdapter.prototype.deserialize = function (value) {\n        if (typeof value === 'string') {\n            if (!value) {\n                return null;\n            }\n            if (ISO_8601_REGEX.test(value)) {\n                var date = new Date(value);\n                if (this.isValid(date)) {\n                    return date;\n                }\n            }\n        }\n        return _super.prototype.deserialize.call(this, value);\n    };\n    NativeDateTimeAdapter.prototype.createDateWithOverflow = function (year, month, date, hours, minutes, seconds) {\n        if (hours === void 0) {\n            hours = 0;\n        }\n        if (minutes === void 0) {\n            minutes = 0;\n        }\n        if (seconds === void 0) {\n            seconds = 0;\n        }\n        var result = new Date(year, month, date, hours, minutes, seconds);\n        if (year >= 0 && year < 100) {\n            result.setFullYear(this.getYear(result) - 1900);\n        }\n        return result;\n    };\n    NativeDateTimeAdapter.prototype.stripDirectionalityCharacters = function (str) {\n        return str.replace(/[\\u200e\\u200f]/g, '');\n    };\n    return NativeDateTimeAdapter;\n}(DateTimeAdapter));\nexport { NativeDateTimeAdapter };\n",null]}