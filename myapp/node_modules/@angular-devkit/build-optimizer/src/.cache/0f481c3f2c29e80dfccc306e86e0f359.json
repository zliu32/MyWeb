{"remainingRequest":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@swimlane\\ngx-charts\\release\\common\\axes\\x-axis-ticks.component.js","dependencies":[{"path":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@swimlane\\ngx-charts\\release\\common\\axes\\x-axis-ticks.component.js","mtime":499162500000},{"path":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1529671348740},{"path":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { __decorate } from \"tslib\";\nimport { __metadata } from \"tslib\";\nimport { Component, Input, Output, EventEmitter, ElementRef, ViewChild, ChangeDetectionStrategy } from '@angular/core';\nimport { trimLabel } from '../trim-label.helper';\nimport { reduceTicks } from './ticks.helper';\nvar XAxisTicksComponent = /** @class */ /*@__PURE__*/ (function () {\n    function XAxisTicksComponent() {\n        this.tickArguments = [5];\n        this.tickStroke = '#ccc';\n        this.showGridLines = false;\n        this.dimensionsChanged = new EventEmitter();\n        this.verticalSpacing = 20;\n        this.rotateLabels = false;\n        this.innerTickSize = 6;\n        this.outerTickSize = 6;\n        this.tickPadding = 3;\n        this.textAnchor = 'middle';\n        this.maxTicksLength = 0;\n        this.maxAllowedLength = 16;\n        this.height = 0;\n        this.trimLabel = trimLabel;\n    }\n    XAxisTicksComponent.prototype.ngOnChanges = function (changes) {\n        this.update();\n    };\n    XAxisTicksComponent.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        setTimeout(function () { return _this.updateDims(); });\n    };\n    XAxisTicksComponent.prototype.updateDims = function () {\n        var _this = this;\n        var height = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().height, 10);\n        if (height !== this.height) {\n            this.height = height;\n            this.dimensionsChanged.emit({ height: height });\n            setTimeout(function () { return _this.updateDims(); });\n        }\n    };\n    XAxisTicksComponent.prototype.update = function () {\n        var _this = this;\n        var scale = this.scale;\n        this.ticks = this.getTicks();\n        if (this.tickFormatting) {\n            this.tickFormat = this.tickFormatting;\n        }\n        else if (scale.tickFormat) {\n            this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n        }\n        else {\n            this.tickFormat = function (d) {\n                if (d.constructor.name === 'Date') {\n                    return d.toLocaleDateString();\n                }\n                return d.toLocaleString();\n            };\n        }\n        var angle = this.getRotationAngle(this.ticks);\n        this.adjustedScale = this.scale.bandwidth ? function (d) {\n            return this.scale(d) + this.scale.bandwidth() * 0.5;\n        } : this.scale;\n        this.textTransform = '';\n        if (angle !== 0) {\n            this.textTransform = \"rotate(\" + angle + \")\";\n            this.textAnchor = 'end';\n            this.verticalSpacing = 10;\n        }\n        else {\n            this.textAnchor = 'middle';\n        }\n        setTimeout(function () { return _this.updateDims(); });\n    };\n    XAxisTicksComponent.prototype.getRotationAngle = function (ticks) {\n        var angle = 0;\n        for (var i = 0; i < ticks.length; i++) {\n            var tick = this.tickFormat(ticks[i]).toString();\n            if (tick.length > this.maxTicksLength) {\n                this.maxTicksLength = tick.length;\n            }\n        }\n        var len = Math.min(this.maxTicksLength, this.maxAllowedLength);\n        var charWidth = 8; // need to measure this\n        var wordWidth = len * charWidth;\n        var baseWidth = wordWidth;\n        var maxBaseWidth = Math.floor(this.width / ticks.length);\n        // calculate optimal angle\n        while (baseWidth > maxBaseWidth && angle > -90) {\n            angle -= 30;\n            baseWidth = Math.cos(angle * (Math.PI / 180)) * wordWidth;\n        }\n        return angle;\n    };\n    XAxisTicksComponent.prototype.getTicks = function () {\n        var ticks;\n        var maxTicks = this.getMaxTicks(20);\n        var maxScaleTicks = this.getMaxTicks(100);\n        if (this.tickValues) {\n            ticks = this.tickValues;\n        }\n        else if (this.scale.ticks) {\n            ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n        }\n        else {\n            ticks = this.scale.domain();\n            ticks = reduceTicks(ticks, maxTicks);\n        }\n        return ticks;\n    };\n    XAxisTicksComponent.prototype.getMaxTicks = function (tickWidth) {\n        return Math.floor(this.width / tickWidth);\n    };\n    XAxisTicksComponent.prototype.tickTransform = function (tick) {\n        return 'translate(' + this.adjustedScale(tick) + ',' + this.verticalSpacing + ')';\n    };\n    XAxisTicksComponent.prototype.gridLineTransform = function () {\n        return \"translate(0,\" + (-this.verticalSpacing - 5) + \")\";\n    };\n    return XAxisTicksComponent;\n}());\nexport { XAxisTicksComponent };\n//# sourceMappingURL=x-axis-ticks.component.js.map\n",null]}