{"remainingRequest":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@swimlane\\ngx-charts\\release\\common\\tooltip\\injection-registery.service.js","dependencies":[{"path":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@swimlane\\ngx-charts\\release\\common\\tooltip\\injection-registery.service.js","mtime":499162500000},{"path":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1529671348740},{"path":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["var InjectionRegistery = /** @class */ /*@__PURE__*/ (function () {\r\n    function InjectionRegistery(injectionService) {\r\n        this.injectionService = injectionService;\r\n        this.defaults = {};\r\n        this.components = new Map();\r\n    }\r\n    InjectionRegistery.prototype.getByType = function (type) {\r\n        if (type === void 0) {\r\n            type = this.type;\r\n        }\r\n        return this.components.get(type);\r\n    };\r\n    InjectionRegistery.prototype.create = function (bindings) {\r\n        return this.createByType(this.type, bindings);\r\n    };\r\n    InjectionRegistery.prototype.createByType = function (type, bindings) {\r\n        bindings = this.assignDefaults(bindings);\r\n        var component = this.injectComponent(type, bindings);\r\n        this.register(type, component);\r\n        return component;\r\n    };\r\n    InjectionRegistery.prototype.destroy = function (instance) {\r\n        var compsByType = this.components.get(instance.componentType);\r\n        if (compsByType) {\r\n            var idx = compsByType.indexOf(instance);\r\n            if (idx > -1) {\r\n                var component = compsByType[idx];\r\n                component.destroy();\r\n                compsByType.splice(idx, 1);\r\n            }\r\n        }\r\n    };\r\n    InjectionRegistery.prototype.destroyAll = function () {\r\n        this.destroyByType(this.type);\r\n    };\r\n    InjectionRegistery.prototype.destroyByType = function (type) {\r\n        var comps = this.components.get(type);\r\n        if (comps) {\r\n            for (var _i = 0, comps_1 = comps; _i < comps_1.length; _i++) {\r\n                var comp = comps_1[_i];\r\n                this.destroy(comp);\r\n            }\r\n        }\r\n    };\r\n    InjectionRegistery.prototype.assignDefaults = function (bindings) {\r\n        var _a = this.defaults, inputs = _a.inputs, outputs = _a.outputs;\r\n        if (!bindings.inputs && !bindings.outputs) {\r\n            bindings = { inputs: bindings };\r\n        }\r\n        if (inputs) {\r\n            bindings.inputs = Object.assign(inputs, bindings.inputs);\r\n        }\r\n        if (outputs) {\r\n            bindings.outputs = Object.assign(outputs, bindings.outputs);\r\n        }\r\n        return bindings;\r\n    };\r\n    InjectionRegistery.prototype.injectComponent = function (type, bindings) {\r\n        return this.injectionService.appendComponent(type, bindings);\r\n    };\r\n    InjectionRegistery.prototype.register = function (type, component) {\r\n        if (!this.components.has(type)) {\r\n            this.components.set(type, []);\r\n        }\r\n        var types = this.components.get(type);\r\n        types.push(component);\r\n    };\r\n    return InjectionRegistery;\r\n}());\r\nexport { InjectionRegistery };\r\n//# sourceMappingURL=injection-registery.service.js.map\r\n",null]}