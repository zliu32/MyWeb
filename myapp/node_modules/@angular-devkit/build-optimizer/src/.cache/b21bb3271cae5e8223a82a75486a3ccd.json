{"remainingRequest":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@swimlane\\ngx-charts\\release\\pie-chart\\pie-grid.component.js","dependencies":[{"path":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@swimlane\\ngx-charts\\release\\pie-chart\\pie-grid.component.js","mtime":499162500000},{"path":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1529671348740},{"path":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\nimport { __decorate } from \"tslib\";\nimport { __metadata } from \"tslib\";\nimport { Component, Input, ViewEncapsulation, ChangeDetectionStrategy, ContentChild, TemplateRef } from '@angular/core';\nimport { min } from 'd3-array';\nimport { format } from 'd3-format';\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { trimLabel } from '../common/trim-label.helper';\nimport { gridLayout } from '../common/grid-layout.helper';\nimport { formatLabel } from '../common/label.helper';\nvar PieGridComponent = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(PieGridComponent, _super);\n    function PieGridComponent() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.tooltipDisabled = false;\n        _this.label = 'Total';\n        _this.minWidth = 150;\n        _this.margin = [20, 20, 20, 20];\n        return _this;\n    }\n    PieGridComponent.prototype.update = function () {\n        _super.prototype.update.call(this);\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin\n        });\n        this.domain = this.getDomain();\n        this.data = gridLayout(this.dims, this.results, this.minWidth, this.designatedTotal);\n        this.transform = \"translate(\" + this.margin[3] + \" , \" + this.margin[0] + \")\";\n        this.series = this.getSeries();\n        this.setColors();\n        this.tooltipText = this.tooltipText || this.defaultTooltipText;\n    };\n    PieGridComponent.prototype.defaultTooltipText = function (_a) {\n        var data = _a.data;\n        var label = trimLabel(formatLabel(data.name));\n        var val = data.value.toLocaleString();\n        return \"\\n      <span class=\\\"tooltip-label\\\">\" + label + \"</span>\\n      <span class=\\\"tooltip-val\\\">\" + val + \"</span>\\n    \";\n    };\n    PieGridComponent.prototype.getDomain = function () {\n        return this.results.map(function (d) { return d.name; });\n    };\n    PieGridComponent.prototype.getSeries = function () {\n        var _this = this;\n        var total = this.designatedTotal ? this.designatedTotal : this.getTotal();\n        return this.data.map(function (d) {\n            var baselineLabelHeight = 20;\n            var padding = 10;\n            var name = d.data.name;\n            var label = formatLabel(name);\n            var value = d.data.value;\n            var radius = (min([d.width - padding, d.height - baselineLabelHeight]) / 2) - 5;\n            var innerRadius = radius * 0.9;\n            var count = 0;\n            var colors = function () {\n                count += 1;\n                if (count === 1) {\n                    return 'rgba(100,100,100,0.3)';\n                }\n                else {\n                    return _this.colorScale.getColor(label);\n                }\n            };\n            var xPos = d.x + (d.width - padding) / 2;\n            var yPos = d.y + (d.height - baselineLabelHeight) / 2;\n            return {\n                transform: \"translate(\" + xPos + \", \" + yPos + \")\",\n                colors: colors,\n                innerRadius: innerRadius,\n                outerRadius: radius,\n                name: name,\n                label: trimLabel(label),\n                total: value,\n                value: value,\n                percent: format('.1%')(d.data.percent),\n                data: [d, {\n                        data: {\n                            other: true,\n                            value: total - value,\n                            name: d.data.name\n                        }\n                    }]\n            };\n        });\n    };\n    PieGridComponent.prototype.getTotal = function () {\n        return this.results\n            .map(function (d) { return d.value; })\n            .reduce(function (sum, d) { return sum + d; }, 0);\n    };\n    PieGridComponent.prototype.onClick = function (data) {\n        this.select.emit(data);\n    };\n    PieGridComponent.prototype.setColors = function () {\n        this.colorScale = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n    };\n    return PieGridComponent;\n}(BaseChartComponent));\nexport { PieGridComponent };\n//# sourceMappingURL=pie-grid.component.js.map\n",null]}