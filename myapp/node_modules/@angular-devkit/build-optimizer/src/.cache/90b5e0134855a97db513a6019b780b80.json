{"remainingRequest":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\ng-pick-datetime\\date-time\\date-time-picker.component.js","dependencies":[{"path":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\ng-pick-datetime\\date-time\\date-time-picker.component.js","mtime":1529904269000},{"path":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1529671348740},{"path":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Inject, InjectionToken, Input, NgZone, Optional, Output, ViewContainerRef } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Overlay, OverlayConfig } from '@angular/cdk/overlay';\nimport { ESCAPE } from '@angular/cdk/keycodes';\nimport { coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { OwlDateTimeContainerComponent } from './date-time-picker-container.component';\nimport { DateTimeAdapter } from './adapter/date-time-adapter.class';\nimport { OWL_DATE_TIME_FORMATS } from './adapter/date-time-format.class';\nimport { OwlDateTime } from './date-time.class';\nimport { OwlDialogService } from '../dialog';\nimport { merge, Subscription } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\nexport var OWL_DTPICKER_SCROLL_STRATEGY = new InjectionToken('owl-dtpicker-scroll-strategy');\nexport function OWL_DTPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return function () { return overlay.scrollStrategies.block(); };\n}\nexport var OWL_DTPICKER_SCROLL_STRATEGY_PROVIDER = {\n    provide: OWL_DTPICKER_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: OWL_DTPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\nvar OwlDateTimeComponent = /*@__PURE__*/ (function (_super) {\n    __extends(OwlDateTimeComponent, _super);\n    function OwlDateTimeComponent(overlay, viewContainerRef, dialogService, ngZone, changeDetector, dateTimeAdapter, scrollStrategy, dateTimeFormats, document) {\n        var _this = _super.call(this, dateTimeAdapter, dateTimeFormats) || this;\n        _this.overlay = overlay;\n        _this.viewContainerRef = viewContainerRef;\n        _this.dialogService = dialogService;\n        _this.ngZone = ngZone;\n        _this.changeDetector = changeDetector;\n        _this.dateTimeAdapter = dateTimeAdapter;\n        _this.scrollStrategy = scrollStrategy;\n        _this.dateTimeFormats = dateTimeFormats;\n        _this.document = document;\n        _this.backdropClass = [];\n        _this.panelClass = [];\n        _this._pickerType = 'both';\n        _this._pickerMode = 'popup';\n        _this._disabled = false;\n        _this.afterPickerClosed = new EventEmitter();\n        _this.afterPickerOpen = new EventEmitter();\n        _this.yearSelected = new EventEmitter();\n        _this.monthSelected = new EventEmitter();\n        _this.confirmSelectedChange = new EventEmitter();\n        _this.disabledChange = new EventEmitter();\n        _this.dtInputSub = Subscription.EMPTY;\n        _this.hidePickerStreamSub = Subscription.EMPTY;\n        _this.confirmSelectedStreamSub = Subscription.EMPTY;\n        _this.focusedElementBeforeOpen = null;\n        _this._selecteds = [];\n        return _this;\n    }\n    Object.defineProperty(OwlDateTimeComponent.prototype, \"startAt\", {\n        get: function () {\n            if (this._startAt) {\n                return this._startAt;\n            }\n            if (this._dtInput) {\n                if (this._dtInput.selectMode === 'single') {\n                    return this._dtInput.value || null;\n                }\n                else if (this._dtInput.selectMode === 'range' ||\n                    this._dtInput.selectMode === 'rangeFrom') {\n                    return this._dtInput.values[0] || null;\n                }\n                else if (this._dtInput.selectMode === 'rangeTo') {\n                    return this._dtInput.values[1] || null;\n                }\n            }\n            else {\n                return null;\n            }\n        },\n        set: function (date) {\n            this._startAt = this.getValidDate(this.dateTimeAdapter.deserialize(date));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OwlDateTimeComponent.prototype, \"pickerType\", {\n        get: function () {\n            return this._pickerType;\n        },\n        set: function (val) {\n            if (val !== this._pickerType) {\n                this._pickerType = val;\n                if (this._dtInput.isInSingleMode) {\n                    this._dtInput.value = this._dtInput.value;\n                }\n                else {\n                    this._dtInput.values = this._dtInput.values;\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OwlDateTimeComponent.prototype, \"pickerMode\", {\n        get: function () {\n            return this._pickerMode;\n        },\n        set: function (mode) {\n            if (mode === 'popup') {\n                this._pickerMode = mode;\n            }\n            else {\n                this._pickerMode = 'dialog';\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OwlDateTimeComponent.prototype, \"disabled\", {\n        get: function () {\n            return this._disabled === undefined && this._dtInput ?\n                this._dtInput.disabled : !!this._disabled;\n        },\n        set: function (value) {\n            value = coerceBooleanProperty(value);\n            if (value !== this._disabled) {\n                this._disabled = value;\n                this.disabledChange.next(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OwlDateTimeComponent.prototype, \"dtInput\", {\n        get: function () {\n            return this._dtInput;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OwlDateTimeComponent.prototype, \"selected\", {\n        get: function () {\n            return this._selected;\n        },\n        set: function (value) {\n            this._selected = value;\n            this.changeDetector.markForCheck();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OwlDateTimeComponent.prototype, \"selecteds\", {\n        get: function () {\n            return this._selecteds;\n        },\n        set: function (values) {\n            this._selecteds = values;\n            this.changeDetector.markForCheck();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OwlDateTimeComponent.prototype, \"minDateTime\", {\n        get: function () {\n            return this._dtInput && this._dtInput.min;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OwlDateTimeComponent.prototype, \"maxDateTime\", {\n        get: function () {\n            return this._dtInput && this._dtInput.max;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OwlDateTimeComponent.prototype, \"dateTimeFilter\", {\n        get: function () {\n            return this._dtInput && this._dtInput.dateTimeFilter;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OwlDateTimeComponent.prototype, \"selectMode\", {\n        get: function () {\n            return this._dtInput.selectMode;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OwlDateTimeComponent.prototype, \"isInSingleMode\", {\n        get: function () {\n            return this._dtInput.isInSingleMode;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OwlDateTimeComponent.prototype, \"isInRangeMode\", {\n        get: function () {\n            return this._dtInput.isInRangeMode;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    OwlDateTimeComponent.prototype.ngOnInit = function () {\n    };\n    OwlDateTimeComponent.prototype.ngOnDestroy = function () {\n        this.close();\n        this.dtInputSub.unsubscribe();\n        this.disabledChange.complete();\n        if (this.popupRef) {\n            this.popupRef.dispose();\n        }\n    };\n    OwlDateTimeComponent.prototype.registerInput = function (input) {\n        var _this = this;\n        if (this._dtInput) {\n            throw Error('A Owl DateTimePicker can only be associated with a single input.');\n        }\n        this._dtInput = input;\n        this.dtInputSub = this._dtInput.valueChange.subscribe(function (value) {\n            if (Array.isArray(value)) {\n                _this.selecteds = value;\n            }\n            else {\n                _this.selected = value;\n            }\n        });\n    };\n    OwlDateTimeComponent.prototype.open = function () {\n        var _this = this;\n        if (this.opened || this.disabled) {\n            return;\n        }\n        if (!this._dtInput) {\n            throw Error('Attempted to open an DateTimePicker with no associated input.');\n        }\n        if (this.document) {\n            this.focusedElementBeforeOpen = this.document.activeElement;\n        }\n        if (this.isInSingleMode) {\n            this.selected = this._dtInput.value;\n        }\n        else if (this.isInRangeMode) {\n            this.selecteds = this._dtInput.values;\n        }\n        this.pickerMode === 'dialog' ?\n            this.openAsDialog() :\n            this.openAsPopup();\n        this.pickerContainer.picker = this;\n        this.hidePickerStreamSub = this.pickerContainer.hidePickerStream\n            .subscribe(function () {\n            _this.close();\n        });\n        this.confirmSelectedStreamSub = this.pickerContainer.confirmSelectedStream\n            .subscribe(function (event) {\n            _this.confirmSelect(event);\n        });\n        this.opened = true;\n        this.afterPickerOpen.emit();\n    };\n    OwlDateTimeComponent.prototype.select = function (date) {\n        if (Array.isArray(date)) {\n            this.selecteds = date.slice();\n        }\n        else {\n            this.selected = date;\n        }\n        if (this.pickerMode !== 'dialog' &&\n            this.pickerType === 'calendar' &&\n            (this.isInSingleMode || (this.isInRangeMode && this.selecteds[0] && this.selecteds[1]))) {\n            this.confirmSelect();\n        }\n    };\n    OwlDateTimeComponent.prototype.selectYear = function (normalizedYear) {\n        this.yearSelected.emit(normalizedYear);\n    };\n    OwlDateTimeComponent.prototype.selectMonth = function (normalizedMonth) {\n        this.monthSelected.emit(normalizedMonth);\n    };\n    OwlDateTimeComponent.prototype.close = function () {\n        var _this = this;\n        if (!this.opened) {\n            return;\n        }\n        if (this.popupRef && this.popupRef.hasAttached()) {\n            this.popupRef.detach();\n        }\n        if (this.pickerContainerPortal && this.pickerContainerPortal.isAttached) {\n            this.pickerContainerPortal.detach();\n        }\n        if (this.hidePickerStreamSub) {\n            this.hidePickerStreamSub.unsubscribe();\n            this.hidePickerStreamSub = null;\n        }\n        if (this.confirmSelectedStreamSub) {\n            this.confirmSelectedStreamSub.unsubscribe();\n            this.confirmSelectedStreamSub = null;\n        }\n        if (this.dialogRef) {\n            this.dialogRef.close();\n            this.dialogRef = null;\n        }\n        var completeClose = function () {\n            if (_this.opened) {\n                _this.opened = false;\n                _this.afterPickerClosed.emit(null);\n                _this.focusedElementBeforeOpen = null;\n            }\n        };\n        if (this.focusedElementBeforeOpen &&\n            typeof this.focusedElementBeforeOpen.focus === 'function') {\n            this.focusedElementBeforeOpen.focus();\n            setTimeout(completeClose);\n        }\n        else {\n            completeClose();\n        }\n    };\n    OwlDateTimeComponent.prototype.confirmSelect = function (event) {\n        if (this.isInSingleMode) {\n            var selected = this.selected || this.startAt || this.dateTimeAdapter.now();\n            this.confirmSelectedChange.emit(selected);\n        }\n        else if (this.isInRangeMode) {\n            this.confirmSelectedChange.emit(this.selecteds);\n        }\n        this.close();\n        return;\n    };\n    OwlDateTimeComponent.prototype.openAsDialog = function () {\n        var _this = this;\n        this.dialogRef = this.dialogService.open(OwlDateTimeContainerComponent, {\n            autoFocus: false,\n            backdropClass: ['cdk-overlay-dark-backdrop'].concat(coerceArray(this.backdropClass)),\n            paneClass: ['owl-dt-dialog'].concat(coerceArray(this.panelClass)),\n            viewContainerRef: this.viewContainerRef,\n        });\n        this.pickerContainer = this.dialogRef.componentInstance;\n        this.dialogRef.afterClosed().subscribe(function () { return _this.close(); });\n    };\n    OwlDateTimeComponent.prototype.openAsPopup = function () {\n        var _this = this;\n        if (!this.pickerContainerPortal) {\n            this.pickerContainerPortal = new ComponentPortal(OwlDateTimeContainerComponent, this.viewContainerRef);\n        }\n        if (!this.popupRef) {\n            this.createPopup();\n        }\n        if (!this.popupRef.hasAttached()) {\n            var componentRef = this.popupRef.attach(this.pickerContainerPortal);\n            this.pickerContainer = componentRef.instance;\n            this.ngZone.onStable.asObservable().pipe(take(1)).subscribe(function () {\n                _this.popupRef.updatePosition();\n            });\n        }\n    };\n    OwlDateTimeComponent.prototype.createPopup = function () {\n        var _this = this;\n        var overlayConfig = new OverlayConfig({\n            positionStrategy: this.createPopupPositionStrategy(),\n            hasBackdrop: true,\n            backdropClass: ['cdk-overlay-transparent-backdrop'].concat(coerceArray(this.backdropClass)),\n            scrollStrategy: this.scrollStrategy(),\n            panelClass: ['owl-dt-popup'].concat(coerceArray(this.panelClass)),\n        });\n        this.popupRef = this.overlay.create(overlayConfig);\n        merge(this.popupRef.backdropClick(), this.popupRef.detachments(), this.popupRef.keydownEvents().pipe(filter(function (event) { return event.keyCode === ESCAPE; }))).subscribe(function () { return _this.close(); });\n    };\n    OwlDateTimeComponent.prototype.createPopupPositionStrategy = function () {\n        return this.overlay.position()\n            .flexibleConnectedTo(this._dtInput.elementRef)\n            .withTransformOriginOn('.owl-dt-container')\n            .withFlexibleDimensions(false)\n            .withPush(false)\n            .withPositions([\n            { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n            { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom' },\n            { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' },\n            { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom' },\n            { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'center' },\n        ]);\n    };\n    return OwlDateTimeComponent;\n}(OwlDateTime));\nexport { OwlDateTimeComponent };\n",null]}