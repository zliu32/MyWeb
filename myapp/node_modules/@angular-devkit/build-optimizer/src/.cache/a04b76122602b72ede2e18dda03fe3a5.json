{"remainingRequest":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@swimlane\\ngx-charts\\release\\common\\tooltip\\position\\position.js","dependencies":[{"path":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@swimlane\\ngx-charts\\release\\common\\tooltip\\position\\position.js","mtime":499162500000},{"path":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1529671348740},{"path":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { PlacementTypes } from './placement.type';\r\nvar caretOffset = 7;\r\nfunction verticalPosition(elDimensions, popoverDimensions, alignment) {\r\n    if (alignment === 'top') {\r\n        return elDimensions.top - caretOffset;\r\n    }\r\n    if (alignment === 'bottom') {\r\n        return elDimensions.top + elDimensions.height - popoverDimensions.height + caretOffset;\r\n    }\r\n    if (alignment === 'center') {\r\n        return elDimensions.top + elDimensions.height / 2 - popoverDimensions.height / 2;\r\n    }\r\n    return undefined;\r\n}\r\nfunction horizontalPosition(elDimensions, popoverDimensions, alignment) {\r\n    if (alignment === 'left') {\r\n        return elDimensions.left - caretOffset;\r\n    }\r\n    if (alignment === 'right') {\r\n        return elDimensions.left + elDimensions.width - popoverDimensions.width + caretOffset;\r\n    }\r\n    if (alignment === 'center') {\r\n        return elDimensions.left + elDimensions.width / 2 - popoverDimensions.width / 2;\r\n    }\r\n    return undefined;\r\n}\r\n/**\r\n * Position helper for the popover directive.\r\n *\r\n * @export\r\n * @class PositionHelper\r\n */\r\nvar PositionHelper = /** @class */ /*@__PURE__*/ (function () {\r\n    function PositionHelper() {\r\n    }\r\n    /**\r\n     * Calculate vertical alignment position\r\n     *\r\n     * @static\r\n     * @param {any} elDimensions\r\n     * @param {any} popoverDimensions\r\n     * @param {any} alignment\r\n     * @returns {number}\r\n     *\r\n     * @memberOf PositionHelper\r\n     */\r\n    PositionHelper.calculateVerticalAlignment = function (elDimensions, popoverDimensions, alignment) {\r\n        var result = verticalPosition(elDimensions, popoverDimensions, alignment);\r\n        if (result + popoverDimensions.height > window.innerHeight) {\r\n            result = window.innerHeight - popoverDimensions.height;\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * Calculate vertical caret position\r\n     *\r\n     * @static\r\n     * @param {any} elDimensions\r\n     * @param {any} popoverDimensions\r\n     * @param {any} caretDimensions\r\n     * @param {any} alignment\r\n     * @returns {number}\r\n     *\r\n     * @memberOf PositionHelper\r\n     */\r\n    PositionHelper.calculateVerticalCaret = function (elDimensions, popoverDimensions, caretDimensions, alignment) {\r\n        var result;\r\n        if (alignment === 'top') {\r\n            result = elDimensions.height / 2 - caretDimensions.height / 2 + caretOffset;\r\n        }\r\n        if (alignment === 'bottom') {\r\n            result = popoverDimensions.height - elDimensions.height / 2 - caretDimensions.height / 2 - caretOffset;\r\n        }\r\n        if (alignment === 'center') {\r\n            result = popoverDimensions.height / 2 - caretDimensions.height / 2;\r\n        }\r\n        var popoverPosition = verticalPosition(elDimensions, popoverDimensions, alignment);\r\n        if (popoverPosition + popoverDimensions.height > window.innerHeight) {\r\n            result += (popoverPosition + popoverDimensions.height - window.innerHeight);\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * Calculate horz alignment position\r\n     *\r\n     * @static\r\n     * @param {any} elDimensions\r\n     * @param {any} popoverDimensions\r\n     * @param {any} alignment\r\n     * @returns {number}\r\n     *\r\n     * @memberOf PositionHelper\r\n     */\r\n    PositionHelper.calculateHorizontalAlignment = function (elDimensions, popoverDimensions, alignment) {\r\n        var result = horizontalPosition(elDimensions, popoverDimensions, alignment);\r\n        if (result + popoverDimensions.width > window.innerWidth) {\r\n            result = window.innerWidth - popoverDimensions.width;\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * Calculate horz caret position\r\n     *\r\n     * @static\r\n     * @param {any} elDimensions\r\n     * @param {any} popoverDimensions\r\n     * @param {any} caretDimensions\r\n     * @param {any} alignment\r\n     * @returns {number}\r\n     *\r\n     * @memberOf PositionHelper\r\n     */\r\n    PositionHelper.calculateHorizontalCaret = function (elDimensions, popoverDimensions, caretDimensions, alignment) {\r\n        var result;\r\n        if (alignment === 'left') {\r\n            result = elDimensions.width / 2 - caretDimensions.width / 2 + caretOffset;\r\n        }\r\n        if (alignment === 'right') {\r\n            result = popoverDimensions.width - elDimensions.width / 2 - caretDimensions.width / 2 - caretOffset;\r\n        }\r\n        if (alignment === 'center') {\r\n            result = popoverDimensions.width / 2 - caretDimensions.width / 2;\r\n        }\r\n        var popoverPosition = horizontalPosition(elDimensions, popoverDimensions, alignment);\r\n        if (popoverPosition + popoverDimensions.width > window.innerWidth) {\r\n            result += (popoverPosition + popoverDimensions.width - window.innerWidth);\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * Checks if the element's position should be flipped\r\n     *\r\n     * @static\r\n     * @param {any} elDimensions\r\n     * @param {any} popoverDimensions\r\n     * @param {any} placement\r\n     * @param {any} alignment\r\n     * @param {any} spacing\r\n     * @returns {boolean}\r\n     *\r\n     * @memberOf PositionHelper\r\n     */\r\n    PositionHelper.shouldFlip = function (elDimensions, popoverDimensions, placement, alignment, spacing) {\r\n        var flip = false;\r\n        if (placement === 'right') {\r\n            var popoverPosition = horizontalPosition(elDimensions, popoverDimensions, alignment);\r\n            if (popoverPosition + popoverDimensions.width + spacing > window.innerWidth) {\r\n                flip = true;\r\n            }\r\n        }\r\n        if (placement === 'left') {\r\n            var popoverPosition = horizontalPosition(elDimensions, popoverDimensions, alignment);\r\n            if (popoverPosition - spacing < 0) {\r\n                flip = true;\r\n            }\r\n        }\r\n        if (placement === 'top') {\r\n            if (elDimensions.top - popoverDimensions.height - spacing < 0) {\r\n                flip = true;\r\n            }\r\n        }\r\n        if (placement === 'bottom') {\r\n            var popoverPosition = verticalPosition(elDimensions, popoverDimensions, alignment);\r\n            if (popoverPosition + popoverDimensions.height + spacing > window.innerHeight) {\r\n                flip = true;\r\n            }\r\n        }\r\n        return flip;\r\n    };\r\n    /**\r\n     * Position caret\r\n     *\r\n     * @static\r\n     * @param {any} placement\r\n     * @param {any} elmDim\r\n     * @param {any} hostDim\r\n     * @param {any} caretDimensions\r\n     * @param {any} alignment\r\n     * @returns {*}\r\n     *\r\n     * @memberOf PositionHelper\r\n     */\r\n    PositionHelper.positionCaret = function (placement, elmDim, hostDim, caretDimensions, alignment) {\r\n        var top = 0;\r\n        var left = 0;\r\n        if (placement === PlacementTypes.right) {\r\n            left = -7;\r\n            top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\r\n        }\r\n        else if (placement === PlacementTypes.left) {\r\n            left = elmDim.width;\r\n            top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\r\n        }\r\n        else if (placement === PlacementTypes.top) {\r\n            top = elmDim.height;\r\n            left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\r\n        }\r\n        else if (placement === PlacementTypes.bottom) {\r\n            top = -7;\r\n            left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\r\n        }\r\n        return { top: top, left: left };\r\n    };\r\n    /**\r\n     * Position content\r\n     *\r\n     * @static\r\n     * @param {any} placement\r\n     * @param {any} elmDim\r\n     * @param {any} hostDim\r\n     * @param {any} spacing\r\n     * @param {any} alignment\r\n     * @returns {*}\r\n     *\r\n     * @memberOf PositionHelper\r\n     */\r\n    PositionHelper.positionContent = function (placement, elmDim, hostDim, spacing, alignment) {\r\n        var top = 0;\r\n        var left = 0;\r\n        if (placement === PlacementTypes.right) {\r\n            left = hostDim.left + hostDim.width + spacing;\r\n            top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\r\n        }\r\n        else if (placement === PlacementTypes.left) {\r\n            left = hostDim.left - elmDim.width - spacing;\r\n            top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\r\n        }\r\n        else if (placement === PlacementTypes.top) {\r\n            top = hostDim.top - elmDim.height - spacing;\r\n            left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\r\n        }\r\n        else if (placement === PlacementTypes.bottom) {\r\n            top = hostDim.top + hostDim.height + spacing;\r\n            left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\r\n        }\r\n        return { top: top, left: left };\r\n    };\r\n    /**\r\n     * Determine placement based on flip\r\n     *\r\n     * @static\r\n     * @param {any} placement\r\n     * @param {any} elmDim\r\n     * @param {any} hostDim\r\n     * @param {any} spacing\r\n     * @param {any} alignment\r\n     * @returns {*}\r\n     *\r\n     * @memberOf PositionHelper\r\n     */\r\n    PositionHelper.determinePlacement = function (placement, elmDim, hostDim, spacing, alignment) {\r\n        var shouldFlip = PositionHelper.shouldFlip(hostDim, elmDim, placement, alignment, spacing);\r\n        if (shouldFlip) {\r\n            if (placement === PlacementTypes.right) {\r\n                return PlacementTypes.left;\r\n            }\r\n            else if (placement === PlacementTypes.left) {\r\n                return PlacementTypes.right;\r\n            }\r\n            else if (placement === PlacementTypes.top) {\r\n                return PlacementTypes.bottom;\r\n            }\r\n            else if (placement === PlacementTypes.bottom) {\r\n                return PlacementTypes.top;\r\n            }\r\n        }\r\n        return placement;\r\n    };\r\n    return PositionHelper;\r\n}());\r\nexport { PositionHelper };\r\n//# sourceMappingURL=position.js.map\r\n",null]}