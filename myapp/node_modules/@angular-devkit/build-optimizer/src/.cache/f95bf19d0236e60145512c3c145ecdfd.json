{"remainingRequest":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\ng-pick-datetime\\date-time\\date-time-picker-container.component.js","dependencies":[{"path":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\ng-pick-datetime\\date-time\\date-time-picker-container.component.js","mtime":1529942220571},{"path":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1529671348740},{"path":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, HostBinding, Optional, ViewChild } from '@angular/core';\nimport { OwlDateTimeIntl } from './date-time-picker-intl.service';\nimport { OwlCalendarComponent } from './calendar.component';\nimport { OwlTimerComponent } from './timer.component';\nimport { DateTimeAdapter } from './adapter/date-time-adapter.class';\nimport { Subject } from 'rxjs';\nimport { owlDateTimePickerAnimations } from './date-time-picker.animations';\nvar OwlDateTimeContainerComponent = /*@__PURE__*/ (function () {\n    function OwlDateTimeContainerComponent(cdRef, elmRef, pickerIntl, dateTimeAdapter) {\n        this.cdRef = cdRef;\n        this.elmRef = elmRef;\n        this.pickerIntl = pickerIntl;\n        this.dateTimeAdapter = dateTimeAdapter;\n        this.activeSelectedIndex = 0;\n        this.hidePicker$ = new Subject();\n        this.confirmSelected$ = new Subject();\n    }\n    Object.defineProperty(OwlDateTimeContainerComponent.prototype, \"hidePickerStream\", {\n        get: function () {\n            return this.hidePicker$.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OwlDateTimeContainerComponent.prototype, \"confirmSelectedStream\", {\n        get: function () {\n            return this.confirmSelected$.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OwlDateTimeContainerComponent.prototype, \"pickerMoment\", {\n        get: function () {\n            return this._clamPickerMoment;\n        },\n        set: function (value) {\n            if (value) {\n                this._clamPickerMoment = this.dateTimeAdapter.clampDate(value, this.picker.minDateTime, this.picker.maxDateTime);\n            }\n            this.cdRef.markForCheck();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OwlDateTimeContainerComponent.prototype, \"pickerType\", {\n        get: function () {\n            return this.picker.pickerType;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OwlDateTimeContainerComponent.prototype, \"cancelLabel\", {\n        get: function () {\n            return this.pickerIntl.cancelBtnLabel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OwlDateTimeContainerComponent.prototype, \"setLabel\", {\n        get: function () {\n            return this.pickerIntl.setBtnLabel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OwlDateTimeContainerComponent.prototype, \"fromLabel\", {\n        get: function () {\n            return this.pickerIntl.rangeFromLabel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OwlDateTimeContainerComponent.prototype, \"toLabel\", {\n        get: function () {\n            return this.pickerIntl.rangeToLabel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OwlDateTimeContainerComponent.prototype, \"fromFormattedValue\", {\n        get: function () {\n            var value = this.picker.selecteds[0];\n            return value ? this.dateTimeAdapter.format(value, this.picker.formatString) : '';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OwlDateTimeContainerComponent.prototype, \"toFormattedValue\", {\n        get: function () {\n            var value = this.picker.selecteds[1];\n            return value ? this.dateTimeAdapter.format(value, this.picker.formatString) : '';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OwlDateTimeContainerComponent.prototype, \"showControlButtons\", {\n        get: function () {\n            return this.picker.pickerMode === 'dialog' ||\n                (this.picker.pickerType !== 'calendar' && this.picker.pickerMode !== 'inline');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OwlDateTimeContainerComponent.prototype, \"containerElm\", {\n        get: function () {\n            return this.elmRef.nativeElement;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OwlDateTimeContainerComponent.prototype, \"owlDTContainerClass\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OwlDateTimeContainerComponent.prototype, \"owlDTPopupContainerClass\", {\n        get: function () {\n            return this.picker.pickerMode === 'popup';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OwlDateTimeContainerComponent.prototype, \"owlDTDialogContainerClass\", {\n        get: function () {\n            return this.picker.pickerMode === 'dialog';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OwlDateTimeContainerComponent.prototype, \"owlDTInlineContainerClass\", {\n        get: function () {\n            return this.picker.pickerMode === 'inline';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OwlDateTimeContainerComponent.prototype, \"owlDTContainerDisabledClass\", {\n        get: function () {\n            return this.picker.disabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OwlDateTimeContainerComponent.prototype, \"owlDTContainerId\", {\n        get: function () {\n            return this.picker.id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OwlDateTimeContainerComponent.prototype, \"owlDTContainerAnimation\", {\n        get: function () {\n            return this.picker.pickerMode === 'inline' ? '' : 'enter';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    OwlDateTimeContainerComponent.prototype.ngOnInit = function () {\n    };\n    OwlDateTimeContainerComponent.prototype.ngAfterContentInit = function () {\n        this.initPicker();\n    };\n    OwlDateTimeContainerComponent.prototype.ngAfterViewInit = function () {\n        this.focusPicker();\n    };\n    OwlDateTimeContainerComponent.prototype.dateSelected = function (date) {\n        var result;\n        if (this.picker.isInSingleMode) {\n            result = this.dateSelectedInSingleMode(date);\n            if (result) {\n                this.pickerMoment = result;\n                this.picker.select(result);\n            }\n            return;\n        }\n        if (this.picker.isInRangeMode) {\n            result = this.dateSelectedInRangeMode(date);\n            if (result) {\n                this.pickerMoment = result[this.activeSelectedIndex];\n                this.picker.select(result);\n            }\n        }\n    };\n    OwlDateTimeContainerComponent.prototype.timeSelected = function (time) {\n        this.pickerMoment = this.dateTimeAdapter.clone(time);\n        if (!this.picker.dateTimeChecker(this.pickerMoment)) {\n            return;\n        }\n        if (this.picker.isInSingleMode) {\n            this.picker.select(this.pickerMoment);\n            return;\n        }\n        if (this.picker.isInRangeMode) {\n            var selecteds = this.picker.selecteds.slice();\n            if ((this.activeSelectedIndex === 0 && selecteds[1] && this.dateTimeAdapter.compare(this.pickerMoment, selecteds[1]) === 1) ||\n                (this.activeSelectedIndex === 1 && selecteds[0] && this.dateTimeAdapter.compare(this.pickerMoment, selecteds[0]) === -1)) {\n                selecteds[0] = this.pickerMoment;\n                selecteds[1] = this.pickerMoment;\n            }\n            else {\n                selecteds[this.activeSelectedIndex] = this.pickerMoment;\n            }\n            this.picker.select(selecteds);\n        }\n    };\n    OwlDateTimeContainerComponent.prototype.onCancelClicked = function (event) {\n        this.hidePicker$.next(null);\n        event.preventDefault();\n        return;\n    };\n    OwlDateTimeContainerComponent.prototype.onSetClicked = function (event) {\n        if (!this.picker.dateTimeChecker(this.pickerMoment)) {\n            this.hidePicker$.next(null);\n            event.preventDefault();\n            return;\n        }\n        this.confirmSelected$.next(event);\n        event.preventDefault();\n        return;\n    };\n    OwlDateTimeContainerComponent.prototype.toggleRangeActiveIndex = function () {\n        if (this.picker.selectMode === 'range') {\n            this.activeSelectedIndex =\n                this.activeSelectedIndex === 0 ? 1 : 0;\n            var selected = this.picker.selecteds[this.activeSelectedIndex];\n            if (this.picker.selecteds && selected) {\n                this.pickerMoment = this.dateTimeAdapter.clone(selected);\n            }\n        }\n        return;\n    };\n    OwlDateTimeContainerComponent.prototype.initPicker = function () {\n        this.pickerMoment = this.picker.startAt || this.dateTimeAdapter.now();\n        this.activeSelectedIndex = this.picker.selectMode === 'rangeTo' ? 1 : 0;\n    };\n    OwlDateTimeContainerComponent.prototype.dateSelectedInSingleMode = function (date) {\n        if (this.dateTimeAdapter.isSameDay(date, this.picker.selected)) {\n            return null;\n        }\n        return this.updateAndCheckCalendarDate(date);\n    };\n    OwlDateTimeContainerComponent.prototype.dateSelectedInRangeMode = function (date) {\n        var from = this.picker.selecteds[0];\n        var to = this.picker.selecteds[1];\n        var result = this.updateAndCheckCalendarDate(date);\n        if (!result) {\n            return null;\n        }\n        if (this.picker.selectMode === 'range') {\n            if (this.picker.selecteds && this.picker.selecteds.length && !to && from &&\n                this.dateTimeAdapter.differenceInCalendarDays(result, from) >= 0) {\n                to = result;\n                this.activeSelectedIndex = 1;\n            }\n            else {\n                from = result;\n                to = null;\n                this.activeSelectedIndex = 0;\n            }\n        }\n        else if (this.picker.selectMode === 'rangeFrom') {\n            from = result;\n            if (to && this.dateTimeAdapter.compare(from, to) > 0) {\n                to = null;\n            }\n        }\n        else if (this.picker.selectMode === 'rangeTo') {\n            to = result;\n            if (from && this.dateTimeAdapter.compare(from, to) > 0) {\n                from = null;\n            }\n        }\n        return [from, to];\n    };\n    OwlDateTimeContainerComponent.prototype.updateAndCheckCalendarDate = function (date) {\n        var result;\n        if (this.picker.pickerType === 'both') {\n            result = this.dateTimeAdapter.createDate(this.dateTimeAdapter.getYear(date), this.dateTimeAdapter.getMonth(date), this.dateTimeAdapter.getDate(date), this.dateTimeAdapter.getHours(this.pickerMoment), this.dateTimeAdapter.getMinutes(this.pickerMoment), this.dateTimeAdapter.getSeconds(this.pickerMoment));\n            result = this.dateTimeAdapter.clampDate(result, this.picker.minDateTime, this.picker.maxDateTime);\n        }\n        else {\n            result = this.dateTimeAdapter.clone(date);\n        }\n        return this.picker.dateTimeChecker(result) ? result : null;\n    };\n    OwlDateTimeContainerComponent.prototype.focusPicker = function () {\n        if (this.picker.pickerMode === 'inline') {\n            return;\n        }\n        if (this.calendar) {\n            this.calendar.focusActiveCell();\n        }\n        else if (this.timer) {\n            this.timer.focus();\n        }\n    };\n    return OwlDateTimeContainerComponent;\n}());\nexport { OwlDateTimeContainerComponent };\n",null]}