{"remainingRequest":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@swimlane\\ngx-charts\\release\\common\\base-chart.component.js","dependencies":[{"path":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@swimlane\\ngx-charts\\release\\common\\base-chart.component.js","mtime":499162500000},{"path":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1529671348740},{"path":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { __decorate } from \"tslib\";\nimport { __metadata } from \"tslib\";\nimport { ElementRef, NgZone, ChangeDetectorRef, Component, Input, Output, EventEmitter } from '@angular/core';\nimport { fromEvent as observableFromEvent } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { VisibilityObserver } from '../utils';\nvar BaseChartComponent = /** @class */ /*@__PURE__*/ (function () {\n    function BaseChartComponent(chartElement, zone, cd) {\n        this.chartElement = chartElement;\n        this.zone = zone;\n        this.cd = cd;\n        this.scheme = 'cool';\n        this.schemeType = 'ordinal';\n        this.animations = true;\n        this.select = new EventEmitter();\n    }\n    BaseChartComponent.prototype.ngAfterViewInit = function () {\n        this.bindWindowResizeEvent();\n        // listen for visibility of the element for hidden by default scenario\n        this.visibilityObserver = new VisibilityObserver(this.chartElement, this.zone);\n        this.visibilityObserver.visible.subscribe(this.update.bind(this));\n    };\n    BaseChartComponent.prototype.ngOnDestroy = function () {\n        this.unbindEvents();\n        if (this.visibilityObserver) {\n            this.visibilityObserver.visible.unsubscribe();\n            this.visibilityObserver.destroy();\n        }\n    };\n    BaseChartComponent.prototype.ngOnChanges = function (changes) {\n        this.update();\n    };\n    BaseChartComponent.prototype.update = function () {\n        if (this.results) {\n            this.results = this.cloneData(this.results);\n        }\n        else {\n            this.results = [];\n        }\n        if (this.view) {\n            this.width = this.view[0];\n            this.height = this.view[1];\n        }\n        else {\n            var dims = this.getContainerDims();\n            if (dims) {\n                this.width = dims.width;\n                this.height = dims.height;\n            }\n        }\n        // default values if width or height are 0 or undefined\n        if (!this.width) {\n            this.width = 600;\n        }\n        if (!this.height) {\n            this.height = 400;\n        }\n        this.width = ~~this.width;\n        this.height = ~~this.height;\n        if (this.cd) {\n            this.cd.markForCheck();\n        }\n    };\n    BaseChartComponent.prototype.getContainerDims = function () {\n        var width;\n        var height;\n        var hostElem = this.chartElement.nativeElement;\n        if (hostElem.parentNode !== null) {\n            // Get the container dimensions\n            var dims = hostElem.parentNode.getBoundingClientRect();\n            width = dims.width;\n            height = dims.height;\n        }\n        if (width && height) {\n            return { width: width, height: height };\n        }\n        return null;\n    };\n    /**\n     * Converts all date objects that appear as name\n     * into formatted date strings\n     */\n    BaseChartComponent.prototype.formatDates = function () {\n        for (var i = 0; i < this.results.length; i++) {\n            var g = this.results[i];\n            if (g.name instanceof Date) {\n                g.name = g.name.toLocaleDateString();\n            }\n            if (g.series) {\n                for (var j = 0; j < g.series.length; j++) {\n                    var d = g.series[j];\n                    if (d.name instanceof Date) {\n                        d.name = d.name.toLocaleDateString();\n                    }\n                }\n            }\n        }\n    };\n    BaseChartComponent.prototype.unbindEvents = function () {\n        if (this.resizeSubscription) {\n            this.resizeSubscription.unsubscribe();\n        }\n    };\n    BaseChartComponent.prototype.bindWindowResizeEvent = function () {\n        var _this = this;\n        var source = observableFromEvent(window, 'resize');\n        var subscription = source.pipe(debounceTime(200)).subscribe(function (e) {\n            _this.update();\n            if (_this.cd) {\n                _this.cd.markForCheck();\n            }\n        });\n        this.resizeSubscription = subscription;\n    };\n    /**\n     * Clones the data into a new object\n     *\n     * @private\n     * @param {any} data\n     * @returns {*}\n     *\n     * @memberOf BaseChart\n     */\n    BaseChartComponent.prototype.cloneData = function (data) {\n        var results = [];\n        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\n            var item = data_1[_i];\n            var copy = {\n                name: item['name']\n            };\n            if (item['value'] !== undefined) {\n                copy['value'] = item['value'];\n            }\n            if (item['series'] !== undefined) {\n                copy['series'] = [];\n                for (var _a = 0, _b = item['series']; _a < _b.length; _a++) {\n                    var seriesItem = _b[_a];\n                    var seriesItemCopy = Object.assign({}, seriesItem);\n                    copy['series'].push(seriesItemCopy);\n                }\n            }\n            if (item['extra'] !== undefined) {\n                copy['extra'] = JSON.parse(JSON.stringify(item['extra']));\n            }\n            results.push(copy);\n        }\n        return results;\n    };\n    return BaseChartComponent;\n}());\nexport { BaseChartComponent };\n//# sourceMappingURL=base-chart.component.js.map\n",null]}