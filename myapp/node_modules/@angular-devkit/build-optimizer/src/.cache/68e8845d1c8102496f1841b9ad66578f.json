{"remainingRequest":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@swimlane\\ngx-charts\\release\\common\\color.helper.js","dependencies":[{"path":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@swimlane\\ngx-charts\\release\\common\\color.helper.js","mtime":499162500000},{"path":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1529671348740},{"path":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { range } from 'd3-array';\r\nimport { scaleBand, scaleLinear, scaleOrdinal, scaleQuantile } from 'd3-scale';\r\nimport { colorSets } from '../utils/color-sets';\r\nvar ColorHelper = /** @class */ /*@__PURE__*/ (function () {\r\n    function ColorHelper(scheme, type, domain, customColors) {\r\n        if (typeof (scheme) === 'string') {\r\n            scheme = colorSets.find(function (cs) {\r\n                return cs.name === scheme;\r\n            });\r\n        }\r\n        this.colorDomain = scheme.domain;\r\n        this.scaleType = type;\r\n        this.domain = domain;\r\n        this.customColors = customColors;\r\n        this.scale = this.generateColorScheme(scheme, type, this.domain);\r\n    }\r\n    ColorHelper.prototype.generateColorScheme = function (scheme, type, domain) {\r\n        if (typeof (scheme) === 'string') {\r\n            scheme = colorSets.find(function (cs) {\r\n                return cs.name === scheme;\r\n            });\r\n        }\r\n        var colorScale;\r\n        if (type === 'quantile') {\r\n            colorScale = scaleQuantile()\r\n                .range(scheme.domain)\r\n                .domain(domain);\r\n        }\r\n        else if (type === 'ordinal') {\r\n            colorScale = scaleOrdinal()\r\n                .range(scheme.domain)\r\n                .domain(domain);\r\n        }\r\n        else if (type === 'linear') {\r\n            // linear schemes must have at least 2 colors\r\n            var colorDomain = scheme.domain.slice();\r\n            if (colorDomain.length === 1) {\r\n                colorDomain.push(colorDomain[0]);\r\n                this.colorDomain = colorDomain;\r\n            }\r\n            var points = range(0, 1, 1.0 / colorDomain.length);\r\n            colorScale = scaleLinear()\r\n                .domain(points)\r\n                .range(colorDomain);\r\n        }\r\n        return colorScale;\r\n    };\r\n    ColorHelper.prototype.getColor = function (value) {\r\n        if (this.scaleType === 'linear') {\r\n            var valueScale = scaleLinear()\r\n                .domain(this.domain)\r\n                .range([0, 1]);\r\n            return (this.scale(valueScale(value)));\r\n        }\r\n        else {\r\n            if (typeof this.customColors === 'function') {\r\n                return this.customColors(value);\r\n            }\r\n            var formattedValue_1 = value.toString();\r\n            var found = void 0; // todo type customColors\r\n            if (this.customColors && this.customColors.length > 0) {\r\n                found = this.customColors.find(function (mapping) {\r\n                    return mapping.name.toLowerCase() === formattedValue_1.toLowerCase();\r\n                });\r\n            }\r\n            if (found) {\r\n                return found.value;\r\n            }\r\n            else {\r\n                return this.scale(value);\r\n            }\r\n        }\r\n    };\r\n    ColorHelper.prototype.getLinearGradientStops = function (value, start) {\r\n        if (start === undefined) {\r\n            start = this.domain[0];\r\n        }\r\n        var valueScale = scaleLinear()\r\n            .domain(this.domain)\r\n            .range([0, 1]);\r\n        var colorValueScale = scaleBand()\r\n            .domain(this.colorDomain)\r\n            .range([0, 1]);\r\n        var endColor = this.getColor(value);\r\n        // generate the stops\r\n        var startVal = valueScale(start);\r\n        var startColor = this.getColor(start);\r\n        var endVal = valueScale(value);\r\n        var i = 1;\r\n        var currentVal = startVal;\r\n        var stops = [];\r\n        stops.push({\r\n            color: startColor,\r\n            offset: startVal,\r\n            originalOffset: startVal,\r\n            opacity: 1\r\n        });\r\n        while (currentVal < endVal && i < this.colorDomain.length) {\r\n            var color = this.colorDomain[i];\r\n            var offset = colorValueScale(color);\r\n            if (offset <= startVal) {\r\n                i++;\r\n                continue;\r\n            }\r\n            if (offset.toFixed(4) >= (endVal - colorValueScale.bandwidth()).toFixed(4)) {\r\n                break;\r\n            }\r\n            stops.push({\r\n                color: color,\r\n                offset: offset,\r\n                opacity: 1\r\n            });\r\n            currentVal = offset;\r\n            i++;\r\n        }\r\n        if (stops[stops.length - 1].offset < 100) {\r\n            stops.push({\r\n                color: endColor,\r\n                offset: endVal,\r\n                opacity: 1\r\n            });\r\n        }\r\n        if (endVal === startVal) {\r\n            stops[0].offset = 0;\r\n            stops[1].offset = 100;\r\n        }\r\n        else {\r\n            // normalize the offsets into percentages\r\n            if (stops[stops.length - 1].offset !== 100) {\r\n                for (var _i = 0, stops_1 = stops; _i < stops_1.length; _i++) {\r\n                    var s = stops_1[_i];\r\n                    s.offset = ((s.offset - startVal) / (endVal - startVal)) * 100;\r\n                }\r\n            }\r\n        }\r\n        return stops;\r\n    };\r\n    return ColorHelper;\r\n}());\r\nexport { ColorHelper };\r\n//# sourceMappingURL=color.helper.js.map\r\n",null]}