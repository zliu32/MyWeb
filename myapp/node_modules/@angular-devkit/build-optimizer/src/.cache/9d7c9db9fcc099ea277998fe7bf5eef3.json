{"remainingRequest":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@swimlane\\ngx-charts\\release\\gauge\\gauge-axis.component.js","dependencies":[{"path":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@swimlane\\ngx-charts\\release\\gauge\\gauge-axis.component.js","mtime":499162500000},{"path":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1529671348740},{"path":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { __decorate } from \"tslib\";\nimport { __metadata } from \"tslib\";\nimport { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { line } from 'd3-shape';\nvar GaugeAxisComponent = /** @class */ /*@__PURE__*/ (function () {\n    function GaugeAxisComponent() {\n        this.rotate = '';\n    }\n    GaugeAxisComponent.prototype.ngOnChanges = function (changes) {\n        this.update();\n    };\n    GaugeAxisComponent.prototype.update = function () {\n        this.rotationAngle = -90 + this.startAngle;\n        this.rotate = \"rotate(\" + this.rotationAngle + \")\";\n        this.ticks = this.getTicks();\n    };\n    GaugeAxisComponent.prototype.getTicks = function () {\n        var bigTickSegment = this.angleSpan / this.bigSegments;\n        var smallTickSegment = bigTickSegment / (this.smallSegments);\n        var tickLength = 20;\n        var ticks = {\n            big: [],\n            small: []\n        };\n        var startDistance = this.radius + 10;\n        var textDist = startDistance + tickLength + 10;\n        for (var i = 0; i <= this.bigSegments; i++) {\n            var angleDeg = i * bigTickSegment;\n            var angle = angleDeg * Math.PI / 180;\n            var textAnchor = this.getTextAnchor(angleDeg);\n            var skip = false;\n            if (i === 0 && this.angleSpan === 360) {\n                skip = true;\n            }\n            if (!skip) {\n                var text = Number.parseFloat(this.valueScale.invert(angleDeg).toString()).toLocaleString();\n                if (this.tickFormatting) {\n                    text = this.tickFormatting(text);\n                }\n                ticks.big.push({\n                    line: this.getTickPath(startDistance, tickLength, angle),\n                    textAnchor: textAnchor,\n                    text: text,\n                    textTransform: \"\\n            translate(\" + textDist * Math.cos(angle) + \", \" + textDist * Math.sin(angle) + \") rotate(\" + -this.rotationAngle + \")\\n          \"\n                });\n            }\n            if (i === this.bigSegments) {\n                continue;\n            }\n            for (var j = 1; j <= this.smallSegments; j++) {\n                var smallAngleDeg = angleDeg + j * smallTickSegment;\n                var smallAngle = smallAngleDeg * Math.PI / 180;\n                ticks.small.push({\n                    line: this.getTickPath(startDistance, tickLength / 2, smallAngle)\n                });\n            }\n        }\n        return ticks;\n    };\n    GaugeAxisComponent.prototype.getTextAnchor = function (angle) {\n        // [0, 45] = 'middle';\n        // [46, 135] = 'start';\n        // [136, 225] = 'middle';\n        // [226, 315] = 'end';\n        angle = (this.startAngle + angle) % 360;\n        var textAnchor = 'middle';\n        if (angle > 45 && angle <= 135) {\n            textAnchor = 'start';\n        }\n        else if (angle > 225 && angle <= 315) {\n            textAnchor = 'end';\n        }\n        return textAnchor;\n    };\n    GaugeAxisComponent.prototype.getTickPath = function (startDistance, tickLength, angle) {\n        var y1 = startDistance * Math.sin(angle);\n        var y2 = (startDistance + tickLength) * Math.sin(angle);\n        var x1 = startDistance * Math.cos(angle);\n        var x2 = (startDistance + tickLength) * Math.cos(angle);\n        var points = [{ x: x1, y: y1 }, { x: x2, y: y2 }];\n        var lineGenerator = line().x(function (d) { return d.x; }).y(function (d) { return d.y; });\n        return lineGenerator(points);\n    };\n    return GaugeAxisComponent;\n}());\nexport { GaugeAxisComponent };\n//# sourceMappingURL=gauge-axis.component.js.map\n",null]}