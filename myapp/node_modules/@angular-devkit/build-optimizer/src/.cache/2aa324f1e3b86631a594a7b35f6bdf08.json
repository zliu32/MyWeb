{"remainingRequest":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@swimlane\\ngx-charts\\release\\force-directed-graph\\force-directed-graph.component.js","dependencies":[{"path":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@swimlane\\ngx-charts\\release\\force-directed-graph\\force-directed-graph.component.js","mtime":499162500000},{"path":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1529671348740},{"path":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\nimport { __decorate } from \"tslib\";\nimport { __metadata } from \"tslib\";\nimport { Component, ContentChild, ElementRef, HostListener, Input, TemplateRef, ViewChild, Output, ViewEncapsulation, EventEmitter, ChangeDetectionStrategy } from '@angular/core';\nimport { forceCollide, forceLink, forceManyBody, forceSimulation, forceX, forceY } from 'd3-force';\nimport { ChartComponent } from '../common/charts/chart.component';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nvar ForceDirectedGraphComponent = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(ForceDirectedGraphComponent, _super);\n    function ForceDirectedGraphComponent() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.force = forceSimulation()\n            .force('charge', forceManyBody())\n            .force('collide', forceCollide(5))\n            .force('x', forceX())\n            .force('y', forceY());\n        _this.forceLink = forceLink().id(function (node) { return node.value; });\n        _this.legendTitle = 'Legend';\n        _this.nodes = [];\n        _this.links = [];\n        _this.activeEntries = [];\n        _this.tooltipDisabled = false;\n        _this.activate = new EventEmitter();\n        _this.deactivate = new EventEmitter();\n        _this.margin = [0, 0, 0, 0];\n        _this.results = [];\n        _this.groupResultsBy = function (node) { return node.value; };\n        return _this;\n    }\n    ForceDirectedGraphComponent.prototype.update = function () {\n        _super.prototype.update.call(this);\n        // center graph\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showLegend: this.legend,\n        });\n        this.seriesDomain = this.getSeriesDomain();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = \"\\n      translate(\" + (this.dims.xOffset + this.dims.width / 2) + \", \" + (this.margin[0] + this.dims.height / 2) + \")\\n    \";\n        if (this.force) {\n            this.force.nodes(this.nodes)\n                .force('link', this.forceLink.links(this.links))\n                .alpha(0.5).restart();\n        }\n    };\n    ForceDirectedGraphComponent.prototype.onClick = function (data) {\n        this.select.emit(data);\n    };\n    ForceDirectedGraphComponent.prototype.onActivate = function (event) {\n        if (this.activeEntries.indexOf(event) > -1)\n            return;\n        this.activeEntries = [event].concat(this.activeEntries);\n        this.activate.emit({ value: event, entries: this.activeEntries });\n    };\n    ForceDirectedGraphComponent.prototype.onDeactivate = function (event) {\n        var idx = this.activeEntries.indexOf(event);\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = this.activeEntries.slice();\n        this.deactivate.emit({ value: event, entries: this.activeEntries });\n    };\n    ForceDirectedGraphComponent.prototype.getSeriesDomain = function () {\n        var _this = this;\n        return this.nodes.map(function (d) { return _this.groupResultsBy(d); })\n            .reduce(function (nodes, node) { return nodes.includes(node) ? nodes : nodes.concat([node]); }, [])\n            .sort();\n    };\n    ForceDirectedGraphComponent.prototype.trackLinkBy = function (index, link) {\n        return link.index;\n    };\n    ForceDirectedGraphComponent.prototype.trackNodeBy = function (index, node) {\n        return node.value;\n    };\n    ForceDirectedGraphComponent.prototype.setColors = function () {\n        this.colors = new ColorHelper(this.scheme, 'ordinal', this.seriesDomain, this.customColors);\n    };\n    ForceDirectedGraphComponent.prototype.getLegendOptions = function () {\n        return {\n            scaleType: 'ordinal',\n            domain: this.seriesDomain,\n            colors: this.colors,\n            title: this.legendTitle\n        };\n    };\n    // Easier to use Angular2 event management than use d3.drag\n    ForceDirectedGraphComponent.prototype.onDragStart = function (node, $event) {\n        this.force.alphaTarget(0.3).restart();\n        this.draggingNode = node;\n        this.draggingStart = { x: $event.x - node.x, y: $event.y - node.y };\n        this.draggingNode.fx = $event.x - this.draggingStart.x;\n        this.draggingNode.fy = $event.y - this.draggingStart.y;\n    };\n    ForceDirectedGraphComponent.prototype.onDrag = function ($event) {\n        if (!this.draggingNode)\n            return;\n        this.draggingNode.fx = $event.x - this.draggingStart.x;\n        this.draggingNode.fy = $event.y - this.draggingStart.y;\n    };\n    ForceDirectedGraphComponent.prototype.onDragEnd = function ($event) {\n        if (!this.draggingNode)\n            return;\n        this.force.alphaTarget(0);\n        this.draggingNode.fx = undefined;\n        this.draggingNode.fy = undefined;\n        this.draggingNode = undefined;\n    };\n    return ForceDirectedGraphComponent;\n}(BaseChartComponent));\nexport { ForceDirectedGraphComponent };\n//# sourceMappingURL=force-directed-graph.component.js.map\n",null]}