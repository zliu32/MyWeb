{"remainingRequest":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@swimlane\\ngx-charts\\release\\common\\grid-panel-series.component.js","dependencies":[{"path":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@swimlane\\ngx-charts\\release\\common\\grid-panel-series.component.js","mtime":499162500000},{"path":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1529671348740},{"path":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { __decorate } from \"tslib\";\nimport { __metadata } from \"tslib\";\nimport { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nvar GridPanelSeriesComponent = /** @class */ /*@__PURE__*/ (function () {\n    function GridPanelSeriesComponent() {\n    }\n    GridPanelSeriesComponent.prototype.ngOnChanges = function (changes) {\n        this.update();\n    };\n    GridPanelSeriesComponent.prototype.update = function () {\n        this.gridPanels = this.getGridPanels();\n    };\n    GridPanelSeriesComponent.prototype.getGridPanels = function () {\n        var _this = this;\n        return this.data.map(function (d, i) {\n            var offset;\n            var width;\n            var height;\n            var x;\n            var y;\n            var className = 'odd';\n            if (_this.orient === 'vertical') {\n                var position = _this.xScale(d.name);\n                var positionIndex = Number.parseInt((position / _this.xScale.step()).toString());\n                if (positionIndex % 2 === 1) {\n                    className = 'even';\n                }\n                offset = _this.xScale.bandwidth() * _this.xScale.paddingInner();\n                width = _this.xScale.bandwidth() + offset;\n                height = _this.dims.height;\n                x = _this.xScale(d.name) - offset / 2;\n                y = 0;\n            }\n            else if (_this.orient === 'horizontal') {\n                var position = _this.yScale(d.name);\n                var positionIndex = Number.parseInt((position / _this.yScale.step()).toString());\n                if (positionIndex % 2 === 1) {\n                    className = 'even';\n                }\n                offset = _this.yScale.bandwidth() * _this.yScale.paddingInner();\n                width = _this.dims.width;\n                height = _this.yScale.bandwidth() + offset;\n                x = 0;\n                y = _this.yScale(d.name) - offset / 2;\n            }\n            return {\n                name: d.name,\n                class: className,\n                height: height,\n                width: width,\n                x: x,\n                y: y\n            };\n        });\n    };\n    return GridPanelSeriesComponent;\n}());\nexport { GridPanelSeriesComponent };\n//# sourceMappingURL=grid-panel-series.component.js.map\n",null]}