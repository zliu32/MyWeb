{"remainingRequest":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@swimlane\\ngx-charts\\release\\line-chart\\line-series.component.js","dependencies":[{"path":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@swimlane\\ngx-charts\\release\\line-chart\\line-series.component.js","mtime":499162500000},{"path":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1529671348740},{"path":"C:\\Users\\Frank Liu\\Documents\\Github\\MyWeb\\myapp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { __decorate } from \"tslib\";\nimport { __metadata } from \"tslib\";\nimport { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { area, line } from 'd3-shape';\nimport { id } from '../utils/id';\nimport { sortLinear, sortByTime, sortByDomain } from '../utils/sort';\nvar LineSeriesComponent = /** @class */ /*@__PURE__*/ (function () {\n    function LineSeriesComponent() {\n        this.animations = true;\n    }\n    LineSeriesComponent.prototype.ngOnChanges = function (changes) {\n        this.update();\n    };\n    LineSeriesComponent.prototype.update = function () {\n        this.updateGradients();\n        var data = this.sortData(this.data.series);\n        var lineGen = this.getLineGenerator();\n        this.path = lineGen(data) || '';\n        var areaGen = this.getAreaGenerator();\n        this.areaPath = areaGen(data) || '';\n        if (this.hasRange) {\n            var range = this.getRangeGenerator();\n            this.outerPath = range(data) || '';\n        }\n        if (this.hasGradient) {\n            this.stroke = this.gradientUrl;\n            var values = this.data.series.map(function (d) { return d.value; });\n            var max = Math.max.apply(Math, values);\n            var min = Math.min.apply(Math, values);\n            if (max === min) {\n                this.stroke = this.colors.getColor(max);\n            }\n        }\n        else {\n            this.stroke = this.colors.getColor(this.data.name);\n        }\n    };\n    LineSeriesComponent.prototype.getLineGenerator = function () {\n        var _this = this;\n        return line()\n            .x(function (d) {\n            var label = d.name;\n            var value;\n            if (_this.scaleType === 'time') {\n                value = _this.xScale(label);\n            }\n            else if (_this.scaleType === 'linear') {\n                value = _this.xScale(Number(label));\n            }\n            else {\n                value = _this.xScale(label);\n            }\n            return value;\n        })\n            .y(function (d) { return _this.yScale(d.value); })\n            .curve(this.curve);\n    };\n    LineSeriesComponent.prototype.getRangeGenerator = function () {\n        var _this = this;\n        return area()\n            .x(function (d) {\n            var label = d.name;\n            var value;\n            if (_this.scaleType === 'time') {\n                value = _this.xScale(label);\n            }\n            else if (_this.scaleType === 'linear') {\n                value = _this.xScale(Number(label));\n            }\n            else {\n                value = _this.xScale(label);\n            }\n            return value;\n        })\n            .y0(function (d) { return _this.yScale(d.min ? d.min : d.value); })\n            .y1(function (d) { return _this.yScale(d.max ? d.max : d.value); })\n            .curve(this.curve);\n    };\n    LineSeriesComponent.prototype.getAreaGenerator = function () {\n        var _this = this;\n        var xProperty = function (d) {\n            var label = d.name;\n            return _this.xScale(label);\n        };\n        return area()\n            .x(xProperty)\n            .y0(function () { return _this.yScale.range()[0]; })\n            .y1(function (d) { return _this.yScale(d.value); })\n            .curve(this.curve);\n    };\n    LineSeriesComponent.prototype.sortData = function (data) {\n        if (this.scaleType === 'linear') {\n            data = sortLinear(data, 'name');\n        }\n        else if (this.scaleType === 'time') {\n            data = sortByTime(data, 'name');\n        }\n        else {\n            data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n        }\n        return data;\n    };\n    LineSeriesComponent.prototype.updateGradients = function () {\n        if (this.colors.scaleType === 'linear') {\n            this.hasGradient = true;\n            this.gradientId = 'grad' + id().toString();\n            this.gradientUrl = \"url(#\" + this.gradientId + \")\";\n            var values = this.data.series.map(function (d) { return d.value; });\n            var max = Math.max.apply(Math, values);\n            var min = Math.min.apply(Math, values);\n            this.gradientStops = this.colors.getLinearGradientStops(max, min);\n            this.areaGradientStops = this.colors.getLinearGradientStops(max);\n        }\n        else {\n            this.hasGradient = false;\n            this.gradientStops = undefined;\n            this.areaGradientStops = undefined;\n        }\n    };\n    LineSeriesComponent.prototype.isActive = function (entry) {\n        if (!this.activeEntries)\n            return false;\n        var item = this.activeEntries.find(function (d) {\n            return entry.name === d.name;\n        });\n        return item !== undefined;\n    };\n    LineSeriesComponent.prototype.isInactive = function (entry) {\n        if (!this.activeEntries || this.activeEntries.length === 0)\n            return false;\n        var item = this.activeEntries.find(function (d) {\n            return entry.name === d.name;\n        });\n        return item === undefined;\n    };\n    return LineSeriesComponent;\n}());\nexport { LineSeriesComponent };\n//# sourceMappingURL=line-series.component.js.map\n",null]}